%import "abstractTree.*";
%class "ParserExpr";

%embed {: 

static public class MyEvents extends beaver.Parser.Events {
	
	public void syntaxError(Symbol token) {
		System.err.print("Erreur de syntaxe ligne ");
		System.err.println(Symbol.getLine(token.getStart()));
		System.err.print("Token inattendu: ");
		System.err.println(Terminals.NAMES[token.getId()]);
	}
};

:} ;

%init {:
	report = new MyEvents();
:};

%goal Program;

%terminals LPAR, RPAR, COLON, SEMICOLON;
%terminals ASSIGN;
%terminals PLUS, MINUS;
%terminals MULT, DIV;
%terminals INTEGER, FLOAT, ID;
%terminals PI, NEP;
%terminals UFCT, BFCT;
 
%left MULT, DIV;
%left PLUS, MINUS;

%typeof Declarations = "TreeMap";
%typeof Declaration, Expression = "AbstTree";
%typeof UFCT, BFCT = "String";
%typeof INTEGER = "Integer";
%typeof FLOAT = "Double";
%typeof ID = "String";
%typeof PI, NEP = "Double";

Program  =
	Declarations.decs SEMICOLON Expression.exp
	{: TreeMap tree = new TreeMap(decs); tree.addTree(exp); return tree;:}
;


Declarations =
	 Declarations.decs SEMICOLON Declaration.dec 
	 			{: TreeMap tree = new TreeMap(decs); tree.addTree(dec); return tree;:}
	|Declaration.dec 
				{: TreeMap tree = new TreeMap(dec); return tree;:}
;

Declaration =
	ID.id ASSIGN Expression.exp
				{: TreeIdentifier tree = new TreeIdentifier(id, exp); return tree;:}
;

Expression = 
	 Expression.l PLUS Expression.r	
				{: TreeOperator tree = new TreeOperator(Keywords.PLUS, l, r); return tree;:}
				
	|Expression.l MINUS Expression.r	
				{: TreeOperator tree = new TreeOperator(Keywords.MINUS, l, r); return tree;:}
				
	|Expression.l MULT Expression.r	
				{: TreeOperator tree = new TreeOperator(Keywords.MULTIPLY, l, r); return tree;:}
				
	|Expression.l DIV Expression.r	
				{: TreeOperator tree = new TreeOperator(Keywords.DIVIDE, l, r); return tree;:}
				
	|MINUS Expression.l	
				{: TreeOperator tree = new TreeOperator(Keywords.MINUS, l); return tree;:}
				
	|LPAR Expression RPAR .tree
				{: return tree;:}
				
	|UFCT.op LPAR Expression.un RPAR
				{: TreeOperator tree = new TreeOperator(Keywords.valueOf(op), un); return tree;:}
				
	|BFCT.op LPAR Expression.l COLON Expression.r RPAR	
				{: TreeOperator tree = new TreeOperator(Keywords.valueOf(op), l, r); return tree;:}
	
	|ID			.id		{: TreeIdentifier tree = new TreeIdentifier(id); return tree;:}
	|INTEGER	.i		{: TreeInteger tree = new TreeInteger(i); return tree;:}
	|FLOAT		.f		{: TreeFloat tree = new TreeFloat(f); return tree;:}
	|PI			.pi		{: TreeFloat tree = new TreeFloat(pi); return tree;:}
	|NEP		.nep 	{: TreeFloat tree = new TreeFloat(nep); return tree;:}
;






