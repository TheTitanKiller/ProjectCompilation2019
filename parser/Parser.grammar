//////////////////////////////////////////////////
// 
//////////////////////////////////////////////////

%package "main";
%class "Parser";
%import "node.*";
%import "type.*";
%import "environment.*";
%import "java.util.ArrayList";
%import "errors.*";

%embed {: 
	static class Events extends beaver.Parser.Events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
		System.err.format("*** " + msg + " ligne %d, colonne %d\n",
			Symbol.getLine(token.getStart()),
			Symbol.getColumn(token.getStart()));
	}
	
	/*
	 * Environnements disponibles pour la gestion des types complexes, des variables et des fonctions.
	 */
	private Environment typeEnvironment = new Environment("types", 0, 0);
	private Environment procedureEnvironment = new Environment("procedures", 0, 0);
	private StackEnvironment stackEnvironment = new StackEnvironment("local_variables_stack");
	private String type_declaration_name;
	
	public void backtrace() 
	{
		typeEnvironment.backtrace();
		procedureEnvironment.backtrace();
		stackEnvironment.backtrace();
	}
	
:};

%init {: 
	report = new Events();
	stackEnvironment.pushEnvironment("Global", 0, 0);
:};

// KEYWORDS
%terminals TOKEN_TYPE, TOKEN_STRING, TOKEN_INTEGER, TOKEN_BOOLEAN, TOKEN_ARRAY, TOKEN_OF, TOKEN_STRUCT;
%terminals TOKEN_VAR, TOKEN_PROCEDURE, TOKEN_FUNCTION, TOKEN_BEGIN, TOKEN_END, TOKEN_NEW, TOKEN_DISPOSE;
%terminals TOKEN_PRINTLN, TOKEN_READLN, TOKEN_RETURN, TOKEN_IF, TOKEN_THEN, TOKEN_ELSE, TOKEN_WHILE, TOKEN_DO;
%terminals TOKEN_SWITCH, TOKEN_CASE, TOKEN_DEFAULT;

// PONCTS
%terminals TOKEN_SEMIC, TOKEN_DOTDOT, TOKEN_COLON, TOKEN_COMMA, TOKEN_DOT;
%terminals TOKEN_LPAR, TOKEN_RPAR, TOKEN_LBRACKET, TOKEN_RBRACKET, TOKEN_LBRACE, TOKEN_RBRACE;

// OPERATORS
%terminals TOKEN_AFF, TOKEN_CIRC;
%terminals TOKEN_PLUS, TOKEN_MINUS, TOKEN_TIMES, TOKEN_DIV;
%terminals TOKEN_AND, TOKEN_OR, TOKEN_NOT;
%terminals TOKEN_LT, TOKEN_LE, TOKEN_GT, TOKEN_GE, TOKEN_EQ, TOKEN_NE;

// LITERALS
%terminals TOKEN_IDENTIFIER, TOKEN_LIT_INTEGER, TOKEN_LIT_STRING, TOKEN_TRUE, TOKEN_FALSE, TOKEN_NULL; 

//PRIORITIES
%left TOKEN_TIMES, TOKEN_DIV;
%left TOKEN_PLUS; 
%right TOKEN_MINUS;

%left TOKEN_AND, TOKEN_OR;
%right TOKEN_NOT;
%left TOKEN_LT, TOKEN_LE, TOKEN_GT, TOKEN_GE, TOKEN_EQ, TOKEN_NE;

%right TOKEN_IF, TOKEN_THEN, TOKEN_ELSE;

//TYPES

//TODO to change each if needed
%typeof program	                   ="NodeList";
%typeof type_declaration_part      ="NodeList";
%typeof type_declaration_list      ="NodeList";
%typeof type_declaration           ="NodeId";
%typeof type_declaration_head      ="IdentifierList";
%typeof type                       ="Type";
%typeof simple_type                ="Type";
%typeof named_type                 ="Type";
%typeof index_type                 ="Type";
%typeof enumerated_type            ="TypeTuple";
%typeof init_enumerated_type       ="TypeEnumRange";
%typeof subrange_type              ="TypeArrayRange";
%typeof array_type                 ="TypeArray";
%typeof range_type                 ="Type";
%typeof pointer_type               ="TypePointer";
%typeof structure_type             ="TypeStruct";
%typeof feature_list_type          ="TypeFeatureList";
%typeof feature_type               ="TypeFeature";
%typeof variable_declaration_part  ="NodeList";
%typeof variable_declaration_list  ="Node";
%typeof variable_declaration       ="Node";
%typeof identifier_list            ="IdentifierList";
%typeof procedure_definition_part  ="NodeList";
%typeof procedure_definition_list  ="Node";
%typeof procedure_definition       ="Node";
%typeof procedure_definition_head  ="NodeId";
%typeof procedure_declaration_head ="NodeId";
%typeof procedure_head             ="NodeId";
%typeof argt_part                  ="TypeTuple";
%typeof argt_list                  ="NodeList";
%typeof argt                       ="Node";
%typeof block                      ="Node";
%typeof statement_list             ="Node";
%typeof statement                  ="Node";
%typeof simple_statement           ="Node";
%typeof assignment_statement       ="NodeAssign";
%typeof procedure_statement        ="Node";
%typeof procedure_expression       ="Node";
%typeof expression_part            ="NodeList";
%typeof expression_list            ="Node";
%typeof new_statement              ="Node";
%typeof dispose_statement          ="Node";
%typeof println_statement          ="Node";
%typeof readln_statement           ="Node";
%typeof return_statement           ="NodeReturn";
%typeof structured_statement       ="Node";
%typeof if_statement               ="Node";
%typeof while_statement            ="Node";
%typeof case_statement_list        ="NodeList";
%typeof case_statement             ="NodeList";
%typeof case_default 	           ="NodeCase";
%typeof variable_access            ="NodeExp";
%typeof expression                 ="NodeExp";
%typeof literal                    ="NodeLiteral";

%typeof procedure_name 		   	   = "TypeNamed";
%typeof array_access 		   	   = "NodeArrayAccess";
%typeof ptr_access 		   	   	   = "NodePtrAccess";
%typeof struct_access		   	   = "NodeStructAccess";

%goal program;


/*Regles pour code*/


program=
	type_declaration_part.tydec
	variable_declaration_part.vardec
	procedure_definition_part.procdec
	empty_main
	TOKEN_BEGIN.b
	statement_list.stmn
	TOKEN_END.e
													{: 	stackEnvironment.popEnvironment(); 
														return new NodeList(
															tydec != null ? tydec.getStart()
																: vardec != null ? vardec.getStart()
																	: procdec != null ? procdec.getStart()
																		: b.getStart(), 
														e.getEnd(), tydec, vardec, procdec, stmn); :}
	;

empty_main = 
													{: stackEnvironment.pushEnvironment("Main", 0,0); return new TypeVoid(0,0); :}
	;

type_declaration_part= 
	/* empty */	
	| TOKEN_TYPE type_declaration_list.n			{: return n; :}
	;
	
type_declaration_list=
	type_declaration_list.list type_declaration.node		{: list.add(node); return list; :}
	| type_declaration.node									{: return new NodeList(node.getStart(), node.getEnd(), node); :}
	;
	
type_declaration=
	type_declaration_head.tname TOKEN_AFF type.ty TOKEN_SEMIC.sem 	{: 	NodeId node = new NodeId(tname.getStart(), sem.getEnd(), tname.first(), ty); typeEnvironment.putVariable(tname.first(), node); 
																	return node; :}
	;
	
type_declaration_head=
	TOKEN_IDENTIFIER.name			{: return new IdentifierList(name.getStart(), name.getEnd(), (String)name.value); :}
	;
	
type=
	simple_type.n				{: return n; :}
	| named_type.n				{: return n; :}		
	| index_type.n				{: return n; :}
	| array_type.n				{: return n; :}
	| pointer_type.n			{: return n; :}
	| structure_type.n			{: return n; :}
	;
	
simple_type=
	TOKEN_STRING.tk				{: return new TypeString(tk.getStart(), tk.getEnd()); :}
	| TOKEN_INTEGER.tk				{: return new TypeInt(tk.getStart(), tk.getEnd()); :}
	| TOKEN_BOOLEAN.tk				{: return new TypeBoolean(tk.getStart(), tk.getEnd()); :}
	;
	
named_type=
	TOKEN_IDENTIFIER.name 		{: return typeEnvironment.getVariable((String)name.value).getType(); :}
	;
	
index_type=
	enumerated_type.t				{: return t; :}
	| subrange_type.t				{: return t; :}
	;
	
enumerated_type=
	init_enumerated_type.t TOKEN_LPAR.tkl identifier_list.list TOKEN_RPAR.tkr 			
																		{: 
																			TypeTuple tuple = new TypeTuple(tkl.getStart(), tkr.getEnd());
																			int i = 0;
																			for(String s : list)
																			{
																				TypeItemEnum tmp = new TypeItemEnum(tkl.getStart(), tkr.getEnd(), i++, s);
																				stackEnvironment.putVariable(s, new NodeId(tkl.getStart(), tkr.getEnd(), s, tmp));
																				tuple.add(tmp);
																			}
																			return tuple;
																		:}
	;
	
init_enumerated_type=					{: return new TypeEnumRange(0, 0); :}
	;

subrange_type= 
	TOKEN_LIT_INTEGER.int1 TOKEN_DOTDOT TOKEN_LIT_INTEGER.int2 					{: return new TypeArrayRange(int1.getStart(), int2.getEnd(), 
																						new TypeInt(int1.getStart(), int1.getEnd(),(Integer)int1.value), 
																						new TypeInt(int2.getStart(), int2.getEnd(), (Integer)int2.value)); :}
	| TOKEN_IDENTIFIER.name1 TOKEN_DOTDOT TOKEN_IDENTIFIER.name2				{: return new TypeArrayRange(name1.getStart(), name2.getEnd(), 
																						stackEnvironment.getVariable((String)name1.value).getType(),
																						stackEnvironment.getVariable((String)name2.value).getType()); :}
	;
	
array_type=
	TOKEN_ARRAY.tk TOKEN_LBRACKET range_type.r TOKEN_RBRACKET TOKEN_OF type.ty 	{: return new TypeArray(tk.getStart(), ty.getEnd(), r, ty); :}
	;
	
range_type=
	enumerated_type.t				{: return t; :} 	
	| subrange_type.t				{: return t; :}
	| named_type.t					{: return t; :}	
	;
	
pointer_type=
	TOKEN_CIRC.tk type.ty 					{: return new TypePointer(tk.getStart(), ty.getEnd(), ty); :}
	;
	
structure_type=
	TOKEN_STRUCT.tks TOKEN_LBRACE feature_list_type.list TOKEN_RBRACE.tkrb {: return new TypeStruct(tks.getStart(), tkrb.getEnd(), list); :}
	;
	
feature_list_type=
	feature_list_type.list feature_type.f			{: list.add(f); return list; :}
	| feature_type.f								{: return new TypeFeatureList(f.getStart(), f.getEnd(), f); :}
	;
	
feature_type=
	TOKEN_IDENTIFIER.name TOKEN_COLON type.t TOKEN_SEMIC.e /*TODO env*/ {: return new TypeFeature(name.getStart(), e.getEnd(), (String)name.value, t); :}
	;
	
variable_declaration_part= 
	/* empty */ 
	| TOKEN_VAR variable_declaration_list.list 				{: return list; :}
	;
	
variable_declaration_list=
	variable_declaration_list.list variable_declaration.dec 	{: list.add(dec); return list; :}
	| variable_declaration.node									{: return new NodeList(node.getStart(), node.getEnd(), node); :}
	;
	
variable_declaration=
	identifier_list.list TOKEN_COLON type.ty TOKEN_SEMIC.e 
															{: 	
																NodeList node_list = new NodeList(list.getStart(), e.getEnd());
																for(String s : list) 
																{
															         NodeId node = new NodeId(list.getStart(), list.getEnd(), s, ty);
															         stackEnvironment.putVariable(s, node); /* TODO Verif enum (in typeEnvironment)*/
															         node_list.add(node);
														      	} 
														      	return node_list;
														    :}
	;
	
identifier_list=
	identifier_list.list TOKEN_COMMA TOKEN_IDENTIFIER.name 	{: list.add((String)name.value); return list; :}
	| TOKEN_IDENTIFIER.name 								{: return new IdentifierList(name.getStart(), name.getEnd(), (String)name.value); :}
	;
	
procedure_definition_part=
	| procedure_definition_list.n							{: return n; :}
	;
	
procedure_definition_list=
	procedure_definition_list.list procedure_definition.node		{: list.add(node); return list; :}
	| procedure_definition.node                        				{: return new NodeList(node.getStart(), node.getEnd(), node); :}
	;
	
procedure_definition=
	procedure_definition_head.h block.b					{: stackEnvironment.popEnvironment(); return new NodeList(h.getStart(), b.getEnd(), h,b); :}
	| procedure_declaration_head.h TOKEN_SEMIC.e		{: stackEnvironment.popEnvironment(); h.setEnd(e); return h; :}
	;

procedure_definition_head=
	procedure_head.node 	{: 	try 
								{
									procedureEnvironment.putVariable(node.getName(), node);
								}
							 	catch (CustomError err)
							 	{
							 		//Cas deja defini, mais a remplacer
							 		procedureEnvironment.replaceVariable(node.getName(), node);
							 	}
							 	return node; :}
	;
	
procedure_declaration_head=
	procedure_head.node 	{: procedureEnvironment.putVariable(node.getName(),  node); return node; :}
	;
	
procedure_head=
	TOKEN_PROCEDURE.b procedure_name.nid TOKEN_LPAR argt_part.args TOKEN_RPAR.e 
						{: 	NodeId node = new NodeId(b.getStart(), e.getEnd(), nid.getName(), new TypeFunct(b.getStart(), e.getEnd(), nid.getName(), args, new TypeVoid(b.getStart(), e.getEnd()))); 
							return node; 
						:}
						
	| TOKEN_FUNCTION.b procedure_name.nid TOKEN_LPAR argt_part.args TOKEN_RPAR TOKEN_COLON type.ty
						{: 	NodeId node = new NodeId(b.getStart(), ty.getEnd(), nid.getName(), new TypeFunct(b.getStart(), ty.getEnd(), nid.getName(), args, ty)); 
							return node; 
						:}
	;

procedure_name = 
	TOKEN_IDENTIFIER.namefct 					{: 	stackEnvironment.pushEnvironment((String)namefct.value, namefct.getStart(), namefct.getEnd()); 
													return new TypeNamed(namefct.getStart(), namefct.getEnd(), (String)namefct.value); :}
	;

argt_part=
	/* empty */
	| argt_list.list
												{:
													TypeTuple type_params = new TypeTuple(list.getStart(), list.getEnd());
													for(Node n : list)
												         type_params.add(((NodeExp)n).getType());
											      	return type_params;
											    :}
	;
	
argt_list=
	argt_list.list TOKEN_COMMA argt.node   		{: list.add(node); return list; :}
	| argt.node            						{: return new NodeList(node.getStart(), node.getEnd(), node); :}
	;
	
argt=
	TOKEN_IDENTIFIER.name TOKEN_COLON type.ty	{: 	NodeId node = new NodeId(name.getStart(), ty.getEnd(), (String)name.value, new TypeFeature (name.getStart(), ty.getEnd(), (String)name.value, ty)); 
													stackEnvironment.putVariable((String)name.value, node); 
													return node; :}
	;
	
block=
	variable_declaration_part.dec
	TOKEN_BEGIN.b
	statement_list.stmn
	TOKEN_END.e 			
											{: return new NodeList(dec != null ? dec.getStart(): b.getStart() , e.getEnd(), dec, stmn); :}	
	;

statement_list=
	statement_list.list statement.node		{: list.add(node); return list; :}
	| statement.node                      	{: return new NodeList(node.getStart(), node.getEnd(), node); :}
	;
	
statement=
	simple_statement.s						{: return s; :}
	| structured_statement.n 				{: return n; :}
	;
	
simple_statement=
	assignment_statement.a											{: return a; :}
	| procedure_statement.s											{: return s; :}
	| new_statement.n												{: return n; :}
	| dispose_statement.d											{: return d; :}
	| println_statement.p											{: return p; :}
	| readln_statement.r											{: return r; :}
	| return_statement.r 											{: return r; :}
	;
	
assignment_statement=
	variable_access.v TOKEN_AFF expression.exp TOKEN_SEMIC.e				{: return new NodeAssign(v.getStart(), e.getEnd(), v, exp); :}
	;
	
procedure_statement=
	procedure_expression.exp TOKEN_SEMIC.e									{: exp.setEnd(e); return exp; :}
	;
	
procedure_expression=
	TOKEN_IDENTIFIER.name TOKEN_LPAR expression_part.ep TOKEN_RPAR.e		{: 	NodeId funct = procedureEnvironment.getVariable((String)name.value); 
																			return new NodeCallFct( name.getStart(), e.getEnd(), (String)name.value, (TypeFunct)funct.getType(), ep); :}
	;
	
expression_part=
	/* empty */
	| expression_list.n									{: return n; :}
	;
	
expression_list=
	expression_list.list TOKEN_COMMA expression.node   	{: list.add(node); return list; :}
	| expression.node                   				{: return new NodeList(node.getStart(), node.getEnd(), node); :}
	;	
	
new_statement=
	TOKEN_NEW.b variable_access.v TOKEN_SEMIC.e 			{: return new NodeNew(b.getStart(), e.getEnd(), v); :}
	;
	
dispose_statement=
	TOKEN_DISPOSE.b variable_access.v TOKEN_SEMIC.e			{: return new NodeDispose(b.getStart(), e.getEnd(), v); :}
	;
	
println_statement=
	TOKEN_PRINTLN.b expression.exp TOKEN_SEMIC.e			{: return new NodeOp(b.getStart(), e.getEnd(), "println", exp); :}
	;	
	
readln_statement=
	TOKEN_READLN.b expression.exp TOKEN_SEMIC.e				{: return new NodeOp(b.getStart(), e.getEnd(), "readln", exp); :}
	;
	
return_statement=
	TOKEN_RETURN.b expression.exp TOKEN_SEMIC.e 			{: return new NodeReturn(b.getStart(), e.getEnd(), exp); :}
	;
	
structured_statement=
	block.n 				{: return n; :}
	| if_statement.n 		{: return n; :}
	| while_statement.n		{: return n; :}
	| switch_statement.n	{: return n; :}
	;
	
if_statement=
	TOKEN_IF.b expression.exp TOKEN_THEN statement.stm1 TOKEN_ELSE statement.stm2 	{: return new NodeIf(b.getStart(), stm2.getEnd(), exp, stm1, stm2); :}
	| TOKEN_IF.b expression.exp TOKEN_THEN statement.stm 								{: return new NodeIf(b.getStart(), stm.getEnd(), exp, stm); :}
	;
	
while_statement=
	TOKEN_WHILE.b expression.exp TOKEN_DO statement.stm 							{: return new NodeWhile(b.getStart(), stm.getEnd(), exp, stm); :}
	;
	
switch_statement=
	TOKEN_SWITCH.b expression.exp TOKEN_BEGIN case_statement_list.stm TOKEN_END.e 	{: return new NodeSwitch(b.getStart(), e.getEnd(), exp, stm); :}
	;
	
case_statement_list=
	case_statement_list.list case_statement.cstmn case_default.cdef				{: list.add(cstmn); list.add(cdef); return list; :}
	| case_statement.cstmn														{: return new NodeList(cstmn.getStart(), cstmn.getEnd(), cstmn); :}
	;
	
case_statement=
	TOKEN_CASE.b identifier_list.list TOKEN_COLON.e statement.stm				{: 	
																					NodeList node_list = new NodeList(b.getStart(), e.getEnd());
																					for(String s : list)
																				         node_list.add(new NodeCase(list.getStart(), list.getEnd(), s, stm));
																			      	return node_list;
																	    		:}
	;

case_default=
	/* empty */
	| TOKEN_DEFAULT.b TOKEN_COLON statement.stm 						{: return new NodeCase(b.getStart(), stm.getEnd(), stm); :}
	;
		
			
ptr_access =
	expression.exp TOKEN_CIRC.e											{: return new NodePtrAccess(exp.getStart(), e.getEnd(), exp); :}
	;
	
struct_access =
	variable_access.t TOKEN_DOT TOKEN_IDENTIFIER.field 					{: return new NodeStructAccess(t.getStart(), field.getEnd(), t, (String)(field.value)); :}
	;
	
array_access =
	variable_access.t TOKEN_LBRACKET expression.i TOKEN_RBRACKET.e 		{: return new NodeArrayAccess(t.getStart(), e.getEnd(), t, i); :}											
	;
	
variable_access=
	TOKEN_IDENTIFIER.name 												{: return stackEnvironment.getVariable((String)name.value); :}
	| array_access.n													{: return n; :}
	| struct_access.n													{: return n; :}
	| ptr_access.n														{: return n; :}
	;

	
expression=
	expression.e1 TOKEN_PLUS expression.e2 		{: return new NodeOp(e1.getStart(), e2.getEnd(), "+", e1, e2); :}
	| expression.e1 TOKEN_MINUS expression.e2 	{: return new NodeOp(e1.getStart(), e2.getEnd(), "-", e1, e2); :}
	| expression.e1 TOKEN_TIMES expression.e2 	{: return new NodeOp(e1.getStart(), e2.getEnd(), "*", e1, e2); :}
	| expression.e1 TOKEN_DIV expression.e2 	{: return new NodeOp(e1.getStart(), e2.getEnd(), "/", e1, e2); :}
	| TOKEN_MINUS.b expression.exp 				{: return new NodeOp(b.getStart(), exp.getEnd(), "-", exp); :}
	
	| expression.e1 TOKEN_OR expression.e2 		{: return new NodeOp(e1.getStart(), e2.getEnd(), "||", e1, e2); :}
	| expression.e1 TOKEN_AND expression.e2 	{: return new NodeOp(e1.getStart(), e2.getEnd(), "&&", e1, e2); :}

	| expression.e1 TOKEN_LT expression.e2 		{: return new NodeOp(e1.getStart(), e2.getEnd(), "<", e1, e2); :}
	| expression.e1 TOKEN_LE expression.e2 		{: return new NodeOp(e1.getStart(), e2.getEnd(), "<=", e1, e2); :}
	| expression.e1 TOKEN_GT expression.e2 		{: return new NodeOp(e1.getStart(), e2.getEnd(), ">", e1, e2); :}
	| expression.e1 TOKEN_GE expression.e2 		{: return new NodeOp(e1.getStart(), e2.getEnd(), ">=", e1, e2); :}
	| expression.e1 TOKEN_EQ expression.e2 		{: return new NodeOp(e1.getStart(), e2.getEnd(), "==", e1, e2); :}
	| expression.e1 TOKEN_NE expression.e2		{: return new NodeOp(e1.getStart(), e2.getEnd(), "!=", e1, e2); :}
	
	| TOKEN_NOT.b expression.exp 				{: return new NodeOp(b.getStart(), exp.getEnd(), "!", exp); :}
		
	| TOKEN_LPAR.b expression.exp TOKEN_RPAR.e	{: exp.setPosition(b, e); return exp; :}
	| procedure_expression.p 					{: return p; :}
	| variable_access.v							{: return v; :}		
	| literal.l 								{: return l; :}
	;
	
literal=
	TOKEN_LIT_INTEGER.n 						{: return new NodeLiteral(n.getStart(), n.getEnd(), new TypeInt(n.getStart(), n.getEnd(), (Integer)(n.value)), (Integer)(n.value)); :}
	| TOKEN_LIT_STRING.n						{: return new NodeLiteral(n.getStart(), n.getEnd(), new TypeString(n.getStart(), n.getEnd()), (String) (n.value)); :}
	| TOKEN_TRUE.n 								{: return new NodeLiteral(n.getStart(), n.getEnd(), new TypeBoolean(n.getStart(), n.getEnd()), true); :}
	| TOKEN_FALSE.n 							{: return new NodeLiteral(n.getStart(), n.getEnd(), new TypeBoolean(n.getStart(), n.getEnd()), false); :}
	| TOKEN_NULL.n 								{: return new NodeLiteral(n.getStart(), n.getEnd(), new TypePointer(n.getStart(), n.getEnd()), null); :}
	;
	
	