/* **************************************************
 ************************************************** */

type

chaine = string;
entier = integer;
booleen = boolean;

named1 = chaine;
//named2 = unknown; //DONE ERROR_EXPECTED 

Months = (January, February, March, April, May, June, July, August, September, October, November, December);
DaysOfWeek = (Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday);
//DONE xxx = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, aa, ab, ac, ad, ae, af, ag, ah); //ERROR_EXPECTED
range1 = 64 .. 81;
range2 = Monday .. Friday;
//range3 = 81 .. 64; //ERROR_EXPECTED
//DONE range4 = Friday .. Unknown; //ERROR_EXPECTED
//range5 = Friday .. Monday; //ERROR_EXPECTED
//range6 = Monday .. December; //ERROR_EXPECTED
//range7 = Friday .. Tuesday; //ERROR_EXPECTED "range not valid"
//range8 = Monday .. April; //ERROR_EXPECTED "incoherent range"

table1 = array [ 1 .. 32 ] of integer;
table2 = array [ range1 ] of integer;
table3 = array [ range2 ] of integer;
table4 = array [ 1 .. 32 ] of array [ DaysOfWeek ] of integer;
//table5 = array [ 1 .. 32 ] of array [ range3 ] of integer; //ERROR_EXPECTED "Range type expected"
table6 = array [ 1 .. 32 ] of array [ Wednesday..Saturday ] of integer;

ptr1 = ^integer;
ptr2 = ^array [ 1 .. 32 ] of array [ DaysOfWeek ] of integer;

var

x, y, z : integer;
//DONE x : boolean; //ERROR_EXPECTED "Variable x yet declared"
b : boolean;
z2 : array [ 1 .. 32] of integer;
k : array [ range2 ] of integer;
l : array [ range2 ] of boolean;
m2 : array [ Monday .. Thursday ] of boolean;
p : ptr1;
m : Months;
r1: range1;
r2: range2;

month : Months;

function goo(i : integer, j : integer) : boolean;
//DONE function goo(i : integer, j : integer) : boolean; //ERROR_EXPECTED "procedure or function declared twice"

function foo(i : integer, j : integer) : ^boolean
var
	result : ^boolean;
begin
	new result;
	//DONE result^ = hoo(i, j); //ERROR_EXPECTED "function not declared"
	result^ = goo(i, j);
	return result;
end

function goo(i : integer, j : integer) : boolean
begin
	return (i+j);
end

//DONE function goo(i : integer, j : integer) : boolean begin return false; end //ERROR_EXPECTED "function already defined"

begin
	b = false;
	//DONE b = 2; //ERROR_EXPECTED "Type error in affectation"
	//DONE l = m2; //ERROR_EXPECTED "Type error in affectation" size enum range
	//DONE l = k; //ERROR_EXPECTED "Type error in affectation"
	
	b = foo(3, 7)^;
	b = goo(3, 7);
	//DONE b = foo(3); //ERROR_EXPECTED "Type error in calling expression"
	//DONE b = foo(3, false); //ERROR_EXPECTED "Type error in calling expression"
	//DONE x = foo(3, 7); //ERROR_EXPECTED "Type error in calling expression"
	
	//DONE z2 [ Thursday ] = 36; //ERROR_EXPECTED "Type error in array access "
	z2 [ 1 ] = 36;
	x = z2 [ 1 ];
	b = goo(z2 [ 1 ], 1);
	//DONE y = z [ false ]; //ERROR_EXPECTED "Type error in array access"
	//DONE y = z [ 4 ]; //ERROR_EXPECTED "Type error in affectation"
	//DONE b = z [ 4 ]; //ERROR_EXPECTED "Type error in affectation"
	//DONE z = k [ 4 ]; //ERROR_EXPECTED "Type error in affectation"
	//DONE b = z2 [ Thursday ]; //ERROR_EXPECTED "Type error in affectation"
	// z2 = 36; //ERROR_EXPECTED ? Accessible variable expected
	

	if (l [ Monday ]) then x = 1;
	if (l [ Monday ]) then x = 1; else x = 2;
	if (z2 [ 7 ]) then x = 1;
	while (z2 [ 7 ]) do x = 1;
	while (z2 [ 7 ]) do 
		begin
			if (l [ Monday ]) then x = 1; else x = 2;
			println x;
			readln y;
		end
		
	switch (month) 
		begin
		case March, April, May:
			println ("spring");
		
		case June, July, August:
			println("summer");
		
		case September, October, November:
			println("autumn");
		
		case February, December, January:
			println("winter");
			
		default:
			println("none");
		end

	x = -(36 + 45 / 7);
	//b = !(2 < false) && (x == 1) && (p == null); //ERROR_EXPECTED "Type error in comparison"
	//b = !(2 < x) && (x == 1) && p ; //ERROR_EXPECTED "Type error in logical expression"
	//b = !(2 < x) && (x == 1 + false) && p ; //ERROR_EXPECTED "Type error in arithmetic expression"

	p = null;
	//p = 0; //ERROR_EXPECTED "Type error in affectation"
	new p;
	//new x; //ERROR_EXPECTED "Type error in pointer access expression"
	p^ = 36;
	//p^ = false;//ERROR_EXPECTED "Type error in pointer access expression"
	//x^ = null; //ERROR_EXPECTED "Type error in pointer access expression"
	x = p^;
	dispose p;
	//dispose x;  //ERROR_EXPECTED "Type error in pointer access expression"

end
