package main;

import errors.*;
import environment.*;
import type.*;
import beaver.*;
import node.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjLtbyLDKL$jwR2IgA9Y92A0s8Io1L1BM2e8PDH2MYx26iGOWGbZH04MqjqgAo1CHTaCq" +
		"5KH0GGKLHL1PPH4540L4K0MihjMfRRMqvVk$E8VFklCmmOtw$#eVC$BvtzdFFE###U#y3qg" +
		"gZ1sgYCwx6DUY0rXY8wdWELN4YJa8rd8nJa8uCd8hJK0EdemqkGZFauM9SYuwu3jVJ$qKSL" +
		"yaSE$0UYYh8SKBS79Np7Pg2x$0KV4jJyFrT2hxBK#ZbTdp0RYx1qrWiUv69Iz6YFDVlyIu6" +
		"OoIw8X#zq1U56551XdjnFChWub4yoGo$j3F8X2GobE56BnelO2Kpl8INEN8kGdWGbv6hbKI" +
		"6kp43ap0PK#GmCzIDkOlkoTJ0EA#6ZSWbzvePkHxgiuOqScjIgG5LcE6Cc1eAagf1V3MynH" +
		"ekPn$QQHzIga5sCaEdc1hQ9f7XDip1Pip7A#Z236V6P5WHo925GNWMm$1Rnbo9AqpFwk0NE" +
		"0ldq5OR3P23Sz48ZN61PPk5PonR5ffZ36x2pHYBSRJPUVuGDyyYz8d9im2te1MlVyJ3c1gJ" +
		"ft$SF5cu8O5jMWBRFN5jet6VPRiVnVG$s#gfdUit2SQP6TSs1xCjM$2f1ZLpyGXxz1YUaCz" +
		"aPL8HnpG$bMO2xi9qZCUVS3lkm9sOg9e70fg7V9eoh3UhIROrtvxYQXBndUVppS92EIXRoc" +
		"CYiokweXs9sU2FaGDOO6AM9OpPPespIhR9#upPb31cfo#ceLN$PgpcslIgB#PNblqyIphVa" +
		"ffOqeMMz6jBQcf9brXIIqkwof9we9ibzVH9lItFVfOqm9A6M5A99Osof7UmaZtrTipN4IQt" +
		"7kkqfrbuFiB92sQDEABr#CVbJRn1VfDgsmSyvcEjl4N#JTME2tWinHQyZQtOhThTHli#W5s" +
		"uLRxZQjw2bKPsi9PSZrjpNhVb$j2EkqHxTYro1tbcZZiyFOHOVnggy6nuFCzcddz19NFqPO" +
		"zJot7CDrulBp7TzDQYJZnFshbgSVUlpPse3iz#MJnxrUFP9vXXE7SdX#SyJnlCC2g930upU" +
		"9e1tAdJUUeeObm3taarhW2r#DuVFKDzdcVEulvx3kE3DMGaLKEwqVJaoEbyexsHlRDsDRwp" +
		"jNZs$l$KW9WQ77APseVArn1A8aCsTOruucZCYeCP#WGokFJAvevMp9XIdY3ztoUk#Jwfhby" +
		"eDItRHLop$JQNztakypVZDra#RNQUmhXv#iUCuRB#REui3lKZk4iaMqzYcvF0rY2kBPrr#6" +
		"qNS2zoOtfgvsgQO9mBuzeSTi5lgsXc1Pzp1hNvH4DsFfc8OvgVIXDPdJkZ2x$Fkl6RjqTI6" +
		"eT$Buyztyxdd0dwklIBp8D8J6HsHLUJYcEyjopJpABaOpBCkfBAE7RzZVXzsfYnqHZR$lEI" +
		"l1tJDJjc9h$VlNMgf$RKvHTdXCiqQyGHhSTdyfzjl2FQd8173lyXyhrKcn$mAAGzq#mM4Qr" +
		"ZjEU9yFcMSCy6zeo3#Iq6dDh46YANk8seI$s7f8izdny3nfx8Imt0JOlgk7x2AQPk5pVIFv" +
		"D#7j6xNolz7WYxj8L9wv1M8zrCUZhfDbBM5Tv3se1q7saJqaEapKc$8Mr3kfwq0#bXqgxCM" +
		"TrNqpHYHOGFzQ6jeS#sc$9MqZaHERoQFaNKpJhwlReB6VUfvYqXtrxrAocFfJn9RUEfQwhy" +
		"PF9vojzBla3h#8veIUQmscRHDfYw$iIxn7ZLpwT#3EL7LLv2UG9bzi5rDDUtMaSE#RNAToG" +
		"wgNq3mLwwROvsZxvxpIR6nkZwCSy9fCC8FbzdYEPVfFQ9X3VMbxwOLQnvE#bsbVUpvnkKFn" +
		"Zr2oqbFlF5US#5SpMaypUSnhoS2yu1kwPmXjRGI#MJbPv2r2SurqFiPtYPwZSIMvJtQZlao" +
		"$KLmVhIU08C$Oty5yHUuhYeJreLeghwVqASGOZA1w9#$Fe6#8p20rYRgKb4E6THDTbd40$y" +
		"BO#HTsWFQYhDLxfAUpaeGaEpbHwEwLKDfNMKdgaqHsaJfSsKviQlBTmkg7DcnlZafNxFuIu" +
		"nSe6FB$JnWtryYJ#6$UTQX7fg6nEXk5Xf1zNVgdAXoXFq7kOIMvLV6nq3DwdVFEftHlMXyZ" +
		"eg0$vc#7AMAhqbgdCEUkk67HEQ7kNTiXytRcYfZZyrffvD7cKlFweWPh$MLCFMXqVxV1R6s" +
		"6PeJ7UVpphVU1CvrZwVRMzmN72laF$9NlX#yeQiaxMoHbwNr#HLMIsloCkoL9R8OdbQfXYF" +
		"LS9tL1ucPX8pY8U81uZxYVi8hjTo3t4tCPsuYtYGc6RYfqgPbqaUCT8ycInp3VUYkJulSsI" +
		"sp999Cb7kb3laTdcE$Y$HCaLM68yfijpGPyrrcRa#ezLlKCeTHnOf$rJvlJqfZyi2mpr6V2" +
		"GVglu3#LR#9V#KVyWtyhLy9N#NBuNhc7mkX#GBNs$u7iX#vJ#LVSfzRAv$9NRBBiF$HJvHs" +
		"nwby#K9RnMJzmYkgh9TtYdFkjLSDvlhHja4woTlomvU$olVg$nluZzaRiOedg#7aBlHmCKm" +
		"0mTz4KO$qivnqCM7wuYkYkjv9kgawCRJ#t3gZg0xS$TWtX6a8ymNMnYjE6uhoYK63izKONE" +
		"MzhxAk2CJ3azntadEuKdFDRY1$22YYDy7HQo$5$dUzErDEf2n0yqPC8JMp5L0$mBARHHj4w" +
		"0T$Q#a$wMa8vbl97Mbp5DAsfxqAk9guXgY0t45zNxayNxp67ijqP6r5TEdcFe#b8Sotr3Ak" +
		"Sn$EUbbrBMWpO$crDjmAz35yt7AqR82ZFu1hC91m0==");
 
	static class Events extends beaver.Parser.Events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
		System.err.format("*** " + msg + " ligne %d, colonne %d\n",
			Symbol.getLine(token.getStart()),
			Symbol.getColumn(token.getStart()));
	}
	
	/*
	 * Environnements disponibles pour la gestion des types complexes, des variables et des fonctions.
	 */
	private Environment typeEnvironment = new Environment("types", 0, 0);
	private Environment procedureEnvironment = new Environment("procedures", 0, 0);
	private StackEnvironment stackEnvironment = new StackEnvironment("local_variables_stack");

	
	public void backtrace() 
	{
		typeEnvironment.backtrace();
		procedureEnvironment.backtrace();
		stackEnvironment.backtrace();
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] program = type_declaration_part.tydec variable_declaration_part.vardec procedure_definition_part.procdec empty_main TOKEN_BEGIN.b statement_list.stmn TOKEN_END.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_tydec = _symbols[offset + 1];
					final NodeList tydec = (NodeList) _symbol_tydec.value;
					final Symbol _symbol_vardec = _symbols[offset + 2];
					final NodeList vardec = (NodeList) _symbol_vardec.value;
					final Symbol _symbol_procdec = _symbols[offset + 3];
					final NodeList procdec = (NodeList) _symbol_procdec.value;
					final Symbol b = _symbols[offset + 5];
					final Symbol _symbol_stmn = _symbols[offset + 6];
					final Node stmn = (Node) _symbol_stmn.value;
					final Symbol e = _symbols[offset + 7];
					 	stackEnvironment.popEnvironment(); 
														return new NodeList(
															tydec != null ? tydec.getStart()
																: vardec != null ? vardec.getStart()
																	: procdec != null ? procdec.getStart()
																		: b.getStart(), 
														e.getEnd(), tydec, vardec, procdec, stmn);
				}
			},
			new Action() {	// [1] empty_main = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 stackEnvironment.pushEnvironment("Main", 0, 0); return new TypeVoid(0,0);
				}
			},
			Action.NONE,  	// [2] type_declaration_part = 
			new Action() {	// [3] type_declaration_part = TOKEN_TYPE type_declaration_list.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final NodeList n = (NodeList) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [4] type_declaration_list = type_declaration_list.list type_declaration.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final NodeList list = (NodeList) _symbol_list.value;
					final Symbol _symbol_node = _symbols[offset + 2];
					final NodeId node = (NodeId) _symbol_node.value;
					 list.add(node); return list;
				}
			},
			new Action() {	// [5] type_declaration_list = type_declaration.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final NodeId node = (NodeId) _symbol_node.value;
					 return new NodeList(node.getStart(), node.getEnd(), node);
				}
			},
			new Action() {	// [6] type_declaration = type_declaration_head.tname TOKEN_AFF type.ty TOKEN_SEMIC.sem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_tname = _symbols[offset + 1];
					final IdentifierList tname = (IdentifierList) _symbol_tname.value;
					final Symbol _symbol_ty = _symbols[offset + 3];
					final Type ty = (Type) _symbol_ty.value;
					final Symbol sem = _symbols[offset + 4];
					 	NodeId node = new NodeId(tname.getStart(), sem.getEnd(), tname.first(), ty); typeEnvironment.putVariable(tname.first(), node); 
																	return node;
				}
			},
			new Action() {	// [7] type_declaration_head = TOKEN_IDENTIFIER.name
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol name = _symbols[offset + 1];
					 return new IdentifierList(name.getStart(), name.getEnd(), (String)name.value);
				}
			},
			new Action() {	// [8] type = simple_type.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Type n = (Type) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [9] type = named_type.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Type n = (Type) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [10] type = index_type.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Type n = (Type) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [11] type = array_type.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final TypeArray n = (TypeArray) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [12] type = pointer_type.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final TypePointer n = (TypePointer) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [13] type = structure_type.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final TypeStruct n = (TypeStruct) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [14] simple_type = TOKEN_STRING.tk
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol tk = _symbols[offset + 1];
					 return new TypeString(tk.getStart(), tk.getEnd());
				}
			},
			new Action() {	// [15] simple_type = TOKEN_INTEGER.tk
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol tk = _symbols[offset + 1];
					 return new TypeInt(tk.getStart(), tk.getEnd());
				}
			},
			new Action() {	// [16] simple_type = TOKEN_BOOLEAN.tk
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol tk = _symbols[offset + 1];
					 return new TypeBoolean(tk.getStart(), tk.getEnd());
				}
			},
			new Action() {	// [17] named_type = TOKEN_IDENTIFIER.name
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol name = _symbols[offset + 1];
					 return typeEnvironment.getVariable((String)name.value).getType();
				}
			},
			new Action() {	// [18] index_type = enumerated_type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeEnumRange t = (TypeEnumRange) _symbol_t.value;
					 return t;
				}
			},
			new Action() {	// [19] index_type = subrange_type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeRange t = (TypeRange) _symbol_t.value;
					 return t;
				}
			},
			new Action() {	// [20] enumerated_type = TOKEN_LPAR.tkl identifier_list.list TOKEN_RPAR.tkr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol tkl = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 2];
					final IdentifierList list = (IdentifierList) _symbol_list.value;
					final Symbol tkr = _symbols[offset + 3];
					 
											TypeEnumRange enumr = new TypeEnumRange(tkl.getStart(), tkr.getEnd());
											int i = 0;
											for(String s : list)
											{
												TypeItemEnum tmp = new TypeItemEnum(tkl.getStart(), tkr.getEnd(), i++, s, enumr.getName());
												stackEnvironment.putVariable(s, new NodeId(tkl.getStart(), tkr.getEnd(), s, tmp));
												if(i==0)
												{
													enumr.setFirst(tmp);
												}
												if(s==list.last())
												{
													enumr.setLast(tmp);
												}
											}
											return enumr;
				}
			},
			new Action() {	// [21] subrange_type = TOKEN_LIT_INTEGER.int1 TOKEN_DOTDOT TOKEN_LIT_INTEGER.int2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol int1 = _symbols[offset + 1];
					final Symbol int2 = _symbols[offset + 3];
					 return new TypeArrayRange(int1.getStart(), int2.getEnd(), 
																						new TypeInt(int1.getStart(), int1.getEnd(),(Integer)int1.value), 
																						new TypeInt(int2.getStart(), int2.getEnd(), (Integer)int2.value));
				}
			},
			new Action() {	// [22] subrange_type = TOKEN_IDENTIFIER.name1 TOKEN_DOTDOT TOKEN_IDENTIFIER.name2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol name1 = _symbols[offset + 1];
					final Symbol name2 = _symbols[offset + 3];
					 return new TypeEnumRange(name1.getStart(), name2.getEnd(), 
																						(TypeItemEnum)stackEnvironment.getVariable((String)name1.value).getType(),
																						(TypeItemEnum)stackEnvironment.getVariable((String)name2.value).getType());
				}
			},
			new Action() {	// [23] array_type = TOKEN_ARRAY.tk TOKEN_LBRACKET range_type.r TOKEN_RBRACKET TOKEN_OF type.ty
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol tk = _symbols[offset + 1];
					final Symbol _symbol_r = _symbols[offset + 3];
					final Type r = (Type) _symbol_r.value;
					final Symbol _symbol_ty = _symbols[offset + 6];
					final Type ty = (Type) _symbol_ty.value;
					 return new TypeArray(tk.getStart(), ty.getEnd(), r, ty);
				}
			},
			new Action() {	// [24] range_type = enumerated_type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeEnumRange t = (TypeEnumRange) _symbol_t.value;
					 return t;
				}
			},
			new Action() {	// [25] range_type = subrange_type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeRange t = (TypeRange) _symbol_t.value;
					 return t;
				}
			},
			new Action() {	// [26] range_type = named_type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					 return t;
				}
			},
			new Action() {	// [27] pointer_type = TOKEN_CIRC.tk type.ty
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol tk = _symbols[offset + 1];
					final Symbol _symbol_ty = _symbols[offset + 2];
					final Type ty = (Type) _symbol_ty.value;
					 return new TypePointer(tk.getStart(), ty.getEnd(), ty);
				}
			},
			new Action() {	// [28] structure_type = TOKEN_STRUCT.tks TOKEN_LBRACE feature_list_type.list TOKEN_RBRACE.tkrb
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol tks = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 3];
					final TypeFeatureList list = (TypeFeatureList) _symbol_list.value;
					final Symbol tkrb = _symbols[offset + 4];
					 return new TypeStruct(tks.getStart(), tkrb.getEnd(), list);
				}
			},
			new Action() {	// [29] feature_list_type = feature_list_type.list feature_type.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final TypeFeatureList list = (TypeFeatureList) _symbol_list.value;
					final Symbol _symbol_f = _symbols[offset + 2];
					final TypeFeature f = (TypeFeature) _symbol_f.value;
					 list.add(f); return list;
				}
			},
			new Action() {	// [30] feature_list_type = feature_type.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_f = _symbols[offset + 1];
					final TypeFeature f = (TypeFeature) _symbol_f.value;
					 return new TypeFeatureList(f.getStart(), f.getEnd(), f);
				}
			},
			new Action() {	// [31] feature_type = TOKEN_IDENTIFIER.name TOKEN_COLON type.t TOKEN_SEMIC.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol name = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Type t = (Type) _symbol_t.value;
					final Symbol e = _symbols[offset + 4];
					 return new TypeFeature(name.getStart(), e.getEnd(), (String)name.value, t);
				}
			},
			Action.NONE,  	// [32] variable_declaration_part = 
			new Action() {	// [33] variable_declaration_part = TOKEN_VAR variable_declaration_list.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 2];
					final Node list = (Node) _symbol_list.value;
					 return list;
				}
			},
			new Action() {	// [34] variable_declaration_list = variable_declaration_list.list variable_declaration.dec
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final Node list = (Node) _symbol_list.value;
					final Symbol _symbol_dec = _symbols[offset + 2];
					final Node dec = (Node) _symbol_dec.value;
					 list.add(dec); return list;
				}
			},
			new Action() {	// [35] variable_declaration_list = variable_declaration.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final Node node = (Node) _symbol_node.value;
					 return new NodeList(node.getStart(), node.getEnd(), node);
				}
			},
			new Action() {	// [36] variable_declaration = identifier_list.list TOKEN_COLON type.ty TOKEN_SEMIC.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final IdentifierList list = (IdentifierList) _symbol_list.value;
					final Symbol _symbol_ty = _symbols[offset + 3];
					final Type ty = (Type) _symbol_ty.value;
					final Symbol e = _symbols[offset + 4];
					 	
																NodeList node_list = new NodeList(list.getStart(), e.getEnd());
																for(String s : list) 
																{
															         NodeId node = new NodeId(list.getStart(), list.getEnd(), s, ty);
															         stackEnvironment.putVariable(s, node); /* TODO Verif enum (in typeEnvironment)*/
															         node_list.add(node);
														      	} 
														      	return node_list;
				}
			},
			new Action() {	// [37] identifier_list = identifier_list.list TOKEN_COMMA TOKEN_IDENTIFIER.name
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final IdentifierList list = (IdentifierList) _symbol_list.value;
					final Symbol name = _symbols[offset + 3];
					 list.add((String)name.value); return list;
				}
			},
			new Action() {	// [38] identifier_list = TOKEN_IDENTIFIER.name
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol name = _symbols[offset + 1];
					 return new IdentifierList(name.getStart(), name.getEnd(), (String)name.value);
				}
			},
			Action.NONE,  	// [39] procedure_definition_part = 
			new Action() {	// [40] procedure_definition_part = procedure_definition_list.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Node n = (Node) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [41] procedure_definition_list = procedure_definition_list.list procedure_definition.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final Node list = (Node) _symbol_list.value;
					final Symbol _symbol_node = _symbols[offset + 2];
					final Node node = (Node) _symbol_node.value;
					 list.add(node); return list;
				}
			},
			new Action() {	// [42] procedure_definition_list = procedure_definition.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final Node node = (Node) _symbol_node.value;
					 return new NodeList(node.getStart(), node.getEnd(), node);
				}
			},
			new Action() {	// [43] procedure_definition = procedure_definition_head.h block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_h = _symbols[offset + 1];
					final NodeId h = (NodeId) _symbol_h.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Node b = (Node) _symbol_b.value;
					 stackEnvironment.popEnvironment(); return new NodeList(h.getStart(), b.getEnd(), h,b);
				}
			},
			new Action() {	// [44] procedure_definition = procedure_declaration_head.h TOKEN_SEMIC.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_h = _symbols[offset + 1];
					final NodeId h = (NodeId) _symbol_h.value;
					final Symbol e = _symbols[offset + 2];
					 stackEnvironment.popEnvironment(); h.setEnd(e); return h;
				}
			},
			new Action() {	// [45] procedure_definition_head = procedure_head.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final NodeId node = (NodeId) _symbol_node.value;
					 	try 
								{
									((TypeFunct)node.getType()).setDefined(true);
									procedureEnvironment.putVariable(node.getName(), node);
								}
							 	catch (CustomError err)
							 	{
							 		//Cas deja declarer, mais verifier definition
							 		((TypeFunct)node.getType()).setDefined(true);
							 		procedureEnvironment.replaceVariable(node.getName(), node);
							 	}
							 	return node;
				}
			},
			new Action() {	// [46] procedure_declaration_head = procedure_head.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final NodeId node = (NodeId) _symbol_node.value;
					 	procedureEnvironment.putVariable(node.getName(),  node); return node;
				}
			},
			new Action() {	// [47] procedure_head = TOKEN_PROCEDURE.b procedure_name.nid TOKEN_LPAR argt_part.args TOKEN_RPAR.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_nid = _symbols[offset + 2];
					final TypeNamed nid = (TypeNamed) _symbol_nid.value;
					final Symbol _symbol_args = _symbols[offset + 4];
					final TypeTuple args = (TypeTuple) _symbol_args.value;
					final Symbol e = _symbols[offset + 5];
					 	NodeId node = new NodeId(b.getStart(), e.getEnd(), nid.getName(), new TypeFunct(b.getStart(), e.getEnd(), nid.getName(), args, new TypeVoid(b.getStart(), e.getEnd()))); 
							return node;
				}
			},
			new Action() {	// [48] procedure_head = TOKEN_FUNCTION.b procedure_name.nid TOKEN_LPAR argt_part.args TOKEN_RPAR TOKEN_COLON type.ty
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_nid = _symbols[offset + 2];
					final TypeNamed nid = (TypeNamed) _symbol_nid.value;
					final Symbol _symbol_args = _symbols[offset + 4];
					final TypeTuple args = (TypeTuple) _symbol_args.value;
					final Symbol _symbol_ty = _symbols[offset + 7];
					final Type ty = (Type) _symbol_ty.value;
					 	NodeId node = new NodeId(b.getStart(), ty.getEnd(), nid.getName(), new TypeFunct(b.getStart(), ty.getEnd(), nid.getName(), args, ty)); 
							return node;
				}
			},
			new Action() {	// [49] procedure_name = TOKEN_IDENTIFIER.namefct
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol namefct = _symbols[offset + 1];
					 	stackEnvironment.pushEnvironment((String)namefct.value, namefct.getStart(), namefct.getEnd()); 
													return new TypeNamed(namefct.getStart(), namefct.getEnd(), (String)namefct.value);
				}
			},
			Action.NONE,  	// [50] argt_part = 
			new Action() {	// [51] argt_part = argt_list.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final NodeList list = (NodeList) _symbol_list.value;
					
													TypeTuple type_params = new TypeTuple(list.getStart(), list.getEnd());
													for(Node n : list)
												         type_params.add(((NodeExp)n).getType());
											      	return type_params;
				}
			},
			new Action() {	// [52] argt_list = argt_list.list TOKEN_COMMA argt.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final NodeList list = (NodeList) _symbol_list.value;
					final Symbol _symbol_node = _symbols[offset + 3];
					final Node node = (Node) _symbol_node.value;
					 list.add(node); return list;
				}
			},
			new Action() {	// [53] argt_list = argt.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final Node node = (Node) _symbol_node.value;
					 return new NodeList(node.getStart(), node.getEnd(), node);
				}
			},
			new Action() {	// [54] argt = TOKEN_IDENTIFIER.name TOKEN_COLON type.ty
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol name = _symbols[offset + 1];
					final Symbol _symbol_ty = _symbols[offset + 3];
					final Type ty = (Type) _symbol_ty.value;
					 	NodeId node = new NodeId(name.getStart(), ty.getEnd(), (String)name.value,  ty); 
													stackEnvironment.putVariable((String)name.value, node); 
													return node;
				}
			},
			new Action() {	// [55] block = variable_declaration_part.dec TOKEN_BEGIN.b statement_list.stmn TOKEN_END.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_dec = _symbols[offset + 1];
					final NodeList dec = (NodeList) _symbol_dec.value;
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_stmn = _symbols[offset + 3];
					final Node stmn = (Node) _symbol_stmn.value;
					final Symbol e = _symbols[offset + 4];
					 return new NodeList(dec != null ? dec.getStart(): b.getStart() , e.getEnd(), dec, stmn);
				}
			},
			new Action() {	// [56] statement_list = statement_list.list statement.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final Node list = (Node) _symbol_list.value;
					final Symbol _symbol_node = _symbols[offset + 2];
					final Node node = (Node) _symbol_node.value;
					 list.add(node); return list;
				}
			},
			new Action() {	// [57] statement_list = statement.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final Node node = (Node) _symbol_node.value;
					 return new NodeList(node.getStart(), node.getEnd(), node);
				}
			},
			new Action() {	// [58] statement = simple_statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					 return s;
				}
			},
			new Action() {	// [59] statement = structured_statement.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Node n = (Node) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [60] simple_statement = assignment_statement.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final NodeAssign a = (NodeAssign) _symbol_a.value;
					 return a;
				}
			},
			new Action() {	// [61] simple_statement = procedure_statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					 return s;
				}
			},
			new Action() {	// [62] simple_statement = new_statement.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Node n = (Node) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [63] simple_statement = dispose_statement.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 1];
					final Node d = (Node) _symbol_d.value;
					 return d;
				}
			},
			new Action() {	// [64] simple_statement = println_statement.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final Node p = (Node) _symbol_p.value;
					 return p;
				}
			},
			new Action() {	// [65] simple_statement = readln_statement.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 1];
					final Node r = (Node) _symbol_r.value;
					 return r;
				}
			},
			new Action() {	// [66] simple_statement = return_statement.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 1];
					final NodeReturn r = (NodeReturn) _symbol_r.value;
					 return r;
				}
			},
			new Action() {	// [67] assignment_statement = variable_access.v TOKEN_AFF expression.exp TOKEN_SEMIC.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final NodeExp v = (NodeExp) _symbol_v.value;
					final Symbol _symbol_exp = _symbols[offset + 3];
					final NodeExp exp = (NodeExp) _symbol_exp.value;
					final Symbol e = _symbols[offset + 4];
					 return new NodeAssign(v.getStart(), e.getEnd(), v, exp);
				}
			},
			new Action() {	// [68] procedure_statement = procedure_expression.exp TOKEN_SEMIC.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_exp = _symbols[offset + 1];
					final Node exp = (Node) _symbol_exp.value;
					final Symbol e = _symbols[offset + 2];
					 exp.setEnd(e); return exp;
				}
			},
			new Action() {	// [69] procedure_expression = TOKEN_IDENTIFIER.name TOKEN_LPAR expression_part.ep TOKEN_RPAR.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol name = _symbols[offset + 1];
					final Symbol _symbol_ep = _symbols[offset + 3];
					final NodeList ep = (NodeList) _symbol_ep.value;
					final Symbol e = _symbols[offset + 4];
					 	NodeId funct = procedureEnvironment.getVariable((String)name.value); 
																			return new NodeCallFct( name.getStart(), e.getEnd(), (String)name.value, (TypeFunct)funct.getType(), ep);
				}
			},
			Action.NONE,  	// [70] expression_part = 
			new Action() {	// [71] expression_part = expression_list.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Node n = (Node) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [72] expression_list = expression_list.list TOKEN_COMMA expression.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final Node list = (Node) _symbol_list.value;
					final Symbol _symbol_node = _symbols[offset + 3];
					final NodeExp node = (NodeExp) _symbol_node.value;
					 list.add(node); return list;
				}
			},
			new Action() {	// [73] expression_list = expression.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final NodeExp node = (NodeExp) _symbol_node.value;
					 return new NodeList(node.getStart(), node.getEnd(), node);
				}
			},
			new Action() {	// [74] new_statement = TOKEN_NEW.b variable_access.v TOKEN_SEMIC.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_v = _symbols[offset + 2];
					final NodeExp v = (NodeExp) _symbol_v.value;
					final Symbol e = _symbols[offset + 3];
					 return new NodeNew(b.getStart(), e.getEnd(), v);
				}
			},
			new Action() {	// [75] dispose_statement = TOKEN_DISPOSE.b variable_access.v TOKEN_SEMIC.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_v = _symbols[offset + 2];
					final NodeExp v = (NodeExp) _symbol_v.value;
					final Symbol e = _symbols[offset + 3];
					 return new NodeDispose(b.getStart(), e.getEnd(), v);
				}
			},
			new Action() {	// [76] println_statement = TOKEN_PRINTLN.b expression.exp TOKEN_SEMIC.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_exp = _symbols[offset + 2];
					final NodeExp exp = (NodeExp) _symbol_exp.value;
					final Symbol e = _symbols[offset + 3];
					 return new NodeOp(b.getStart(), e.getEnd(), "println", exp);
				}
			},
			new Action() {	// [77] readln_statement = TOKEN_READLN.b expression.exp TOKEN_SEMIC.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_exp = _symbols[offset + 2];
					final NodeExp exp = (NodeExp) _symbol_exp.value;
					final Symbol e = _symbols[offset + 3];
					 return new NodeOp(b.getStart(), e.getEnd(), "readln", exp);
				}
			},
			new Action() {	// [78] return_statement = TOKEN_RETURN.b expression.exp TOKEN_SEMIC.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_exp = _symbols[offset + 2];
					final NodeExp exp = (NodeExp) _symbol_exp.value;
					final Symbol e = _symbols[offset + 3];
					 return new NodeReturn(b.getStart(), e.getEnd(), exp);
				}
			},
			new Action() {	// [79] structured_statement = block.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Node n = (Node) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [80] structured_statement = if_statement.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Node n = (Node) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [81] structured_statement = while_statement.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Node n = (Node) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [82] structured_statement = switch_statement.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol n = _symbols[offset + 1];
					 return n;
				}
			},
			new Action() {	// [83] if_statement = TOKEN_IF.b expression.exp TOKEN_THEN statement.stm1 TOKEN_ELSE statement.stm2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_exp = _symbols[offset + 2];
					final NodeExp exp = (NodeExp) _symbol_exp.value;
					final Symbol _symbol_stm1 = _symbols[offset + 4];
					final Node stm1 = (Node) _symbol_stm1.value;
					final Symbol _symbol_stm2 = _symbols[offset + 6];
					final Node stm2 = (Node) _symbol_stm2.value;
					 return new NodeIf(b.getStart(), stm2.getEnd(), exp, stm1, stm2);
				}
			},
			new Action() {	// [84] if_statement = TOKEN_IF.b expression.exp TOKEN_THEN statement.stm
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_exp = _symbols[offset + 2];
					final NodeExp exp = (NodeExp) _symbol_exp.value;
					final Symbol _symbol_stm = _symbols[offset + 4];
					final Node stm = (Node) _symbol_stm.value;
					 return new NodeIf(b.getStart(), stm.getEnd(), exp, stm);
				}
			},
			new Action() {	// [85] while_statement = TOKEN_WHILE.b expression.exp TOKEN_DO statement.stm
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_exp = _symbols[offset + 2];
					final NodeExp exp = (NodeExp) _symbol_exp.value;
					final Symbol _symbol_stm = _symbols[offset + 4];
					final Node stm = (Node) _symbol_stm.value;
					 return new NodeWhile(b.getStart(), stm.getEnd(), exp, stm);
				}
			},
			new Action() {	// [86] switch_statement = TOKEN_SWITCH.b expression.exp TOKEN_BEGIN case_statement_list.stm TOKEN_END.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_exp = _symbols[offset + 2];
					final NodeExp exp = (NodeExp) _symbol_exp.value;
					final Symbol _symbol_stm = _symbols[offset + 4];
					final NodeList stm = (NodeList) _symbol_stm.value;
					final Symbol e = _symbols[offset + 5];
					 return new NodeSwitch(b.getStart(), e.getEnd(), exp, stm);
				}
			},
			new Action() {	// [87] case_statement_list = case_statement_list.list case_statement.cstmn case_default.cdef
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final NodeList list = (NodeList) _symbol_list.value;
					final Symbol _symbol_cstmn = _symbols[offset + 2];
					final NodeList cstmn = (NodeList) _symbol_cstmn.value;
					final Symbol _symbol_cdef = _symbols[offset + 3];
					final NodeCase cdef = (NodeCase) _symbol_cdef.value;
					 list.add(cstmn); list.add(cdef); return list;
				}
			},
			new Action() {	// [88] case_statement_list = case_statement.cstmn
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_cstmn = _symbols[offset + 1];
					final NodeList cstmn = (NodeList) _symbol_cstmn.value;
					 return new NodeList(cstmn.getStart(), cstmn.getEnd(), cstmn);
				}
			},
			new Action() {	// [89] case_statement = TOKEN_CASE.b identifier_list.list TOKEN_COLON.e statement.stm
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_list = _symbols[offset + 2];
					final IdentifierList list = (IdentifierList) _symbol_list.value;
					final Symbol e = _symbols[offset + 3];
					final Symbol _symbol_stm = _symbols[offset + 4];
					final Node stm = (Node) _symbol_stm.value;
					 	
																					NodeList node_list = new NodeList(b.getStart(), e.getEnd());
																					for(String s : list)
																				         node_list.add(new NodeCase(list.getStart(), list.getEnd(), s, stm));
																			      	return node_list;
				}
			},
			Action.NONE,  	// [90] case_default = 
			new Action() {	// [91] case_default = TOKEN_DEFAULT.b TOKEN_COLON statement.stm
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_stm = _symbols[offset + 3];
					final Node stm = (Node) _symbol_stm.value;
					 return new NodeCase(b.getStart(), stm.getEnd(), stm);
				}
			},
			new Action() {	// [92] ptr_access = expression.exp TOKEN_CIRC.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_exp = _symbols[offset + 1];
					final NodeExp exp = (NodeExp) _symbol_exp.value;
					final Symbol e = _symbols[offset + 2];
					 return new NodePtrAccess(exp.getStart(), e.getEnd(), exp);
				}
			},
			new Action() {	// [93] struct_access = variable_access.t TOKEN_DOT TOKEN_IDENTIFIER.field
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final NodeExp t = (NodeExp) _symbol_t.value;
					final Symbol field = _symbols[offset + 3];
					 return new NodeStructAccess(t.getStart(), field.getEnd(), t, (String)(field.value));
				}
			},
			new Action() {	// [94] array_access = variable_access.t TOKEN_LBRACKET expression.i TOKEN_RBRACKET.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final NodeExp t = (NodeExp) _symbol_t.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final NodeExp i = (NodeExp) _symbol_i.value;
					final Symbol e = _symbols[offset + 4];
					 return new NodeArrayAccess(t.getStart(), e.getEnd(), t, i);
				}
			},
			new Action() {	// [95] variable_access = TOKEN_IDENTIFIER.name
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol name = _symbols[offset + 1];
					 return stackEnvironment.getVariable((String)name.value);
				}
			},
			new Action() {	// [96] variable_access = array_access.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final NodeArrayAccess n = (NodeArrayAccess) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [97] variable_access = struct_access.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final NodeStructAccess n = (NodeStructAccess) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [98] variable_access = ptr_access.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final NodePtrAccess n = (NodePtrAccess) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [99] expression = expression.e1 TOKEN_PLUS expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp(e1.getStart(), e2.getEnd(), "+", e1, e2);
				}
			},
			new Action() {	// [100] expression = expression.e1 TOKEN_MINUS expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp(e1.getStart(), e2.getEnd(), "-", e1, e2);
				}
			},
			new Action() {	// [101] expression = expression.e1 TOKEN_TIMES expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp(e1.getStart(), e2.getEnd(), "*", e1, e2);
				}
			},
			new Action() {	// [102] expression = expression.e1 TOKEN_DIV expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp(e1.getStart(), e2.getEnd(), "/", e1, e2);
				}
			},
			new Action() {	// [103] expression = TOKEN_MINUS.b expression.exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_exp = _symbols[offset + 2];
					final NodeExp exp = (NodeExp) _symbol_exp.value;
					 return new NodeOp(b.getStart(), exp.getEnd(), "-", exp);
				}
			},
			new Action() {	// [104] expression = expression.e1 TOKEN_OR expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp(e1.getStart(), e2.getEnd(), "||", e1, e2);
				}
			},
			new Action() {	// [105] expression = expression.e1 TOKEN_AND expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp(e1.getStart(), e2.getEnd(), "&&", e1, e2);
				}
			},
			new Action() {	// [106] expression = expression.e1 TOKEN_LT expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp(e1.getStart(), e2.getEnd(), "<", e1, e2);
				}
			},
			new Action() {	// [107] expression = expression.e1 TOKEN_LE expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp(e1.getStart(), e2.getEnd(), "<=", e1, e2);
				}
			},
			new Action() {	// [108] expression = expression.e1 TOKEN_GT expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp(e1.getStart(), e2.getEnd(), ">", e1, e2);
				}
			},
			new Action() {	// [109] expression = expression.e1 TOKEN_GE expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp(e1.getStart(), e2.getEnd(), ">=", e1, e2);
				}
			},
			new Action() {	// [110] expression = expression.e1 TOKEN_EQ expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp(e1.getStart(), e2.getEnd(), "==", e1, e2);
				}
			},
			new Action() {	// [111] expression = expression.e1 TOKEN_NE expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp(e1.getStart(), e2.getEnd(), "!=", e1, e2);
				}
			},
			new Action() {	// [112] expression = TOKEN_NOT.b expression.exp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_exp = _symbols[offset + 2];
					final NodeExp exp = (NodeExp) _symbol_exp.value;
					 return new NodeOp(b.getStart(), exp.getEnd(), "!", exp);
				}
			},
			new Action() {	// [113] expression = TOKEN_LPAR.b expression.exp TOKEN_RPAR.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					final Symbol _symbol_exp = _symbols[offset + 2];
					final NodeExp exp = (NodeExp) _symbol_exp.value;
					final Symbol e = _symbols[offset + 3];
					 exp.setPosition(b, e); return exp;
				}
			},
			new Action() {	// [114] expression = procedure_expression.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final Node p = (Node) _symbol_p.value;
					 return p;
				}
			},
			new Action() {	// [115] expression = variable_access.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final NodeExp v = (NodeExp) _symbol_v.value;
					 return v;
				}
			},
			new Action() {	// [116] expression = literal.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final NodeLiteral l = (NodeLiteral) _symbol_l.value;
					 return l;
				}
			},
			new Action() {	// [117] literal = TOKEN_LIT_INTEGER.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol n = _symbols[offset + 1];
					 return new NodeLiteral(n.getStart(), n.getEnd(), new TypeInt(n.getStart(), n.getEnd(), (Integer)(n.value)), (Integer)(n.value));
				}
			},
			new Action() {	// [118] literal = TOKEN_LIT_STRING.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol n = _symbols[offset + 1];
					 return new NodeLiteral(n.getStart(), n.getEnd(), new TypeString(n.getStart(), n.getEnd()), (String) (n.value));
				}
			},
			new Action() {	// [119] literal = TOKEN_TRUE.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol n = _symbols[offset + 1];
					 return new NodeLiteral(n.getStart(), n.getEnd(), new TypeBoolean(n.getStart(), n.getEnd()), true);
				}
			},
			new Action() {	// [120] literal = TOKEN_FALSE.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol n = _symbols[offset + 1];
					 return new NodeLiteral(n.getStart(), n.getEnd(), new TypeBoolean(n.getStart(), n.getEnd()), false);
				}
			},
			new Action() {	// [121] literal = TOKEN_NULL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol n = _symbols[offset + 1];
					 return new NodeLiteral(n.getStart(), n.getEnd(), new TypePointer(n.getStart(), n.getEnd()), null);
				}
			}
		};

 
	report = new Events();
	stackEnvironment.pushEnvironment("Global", 0, 0);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
