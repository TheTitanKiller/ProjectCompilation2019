package main;

import environment.*;
import java.util.Iterator;
import type.*;
import beaver.*;
import node.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjM7byLDKL$jxCeAZL5X9CWAXOgf00HKIhW94bh88nH0XX2uiXB062jJL2gyMbbbq9A20" +
		"gH1GGaNtVGK14H44MaRPneLMqjXKjsbez$TwRavaxCs$6OOJwZyFlUsUvtxtdl7VlFVS6e4" +
		"fTvE9It8gMw8VgM8CBS24kmezmCIx1Z$4JL4CIab43JT4ADw03haT7TC8jw4p#1gJXFAIY1" +
		"Pgp$#Me8nNs4xLGofOxC0AtuNRaeIVwOAYsN8two413$1pNuFo4On$2OKOOWDe9nnuO4djr" +
		"rDXFuNUOW8duBUx3MDoF1$0W$Y0VuraKXOomwWooz#00rkCcZh0Hcv427tuZ5J8EvPZ5xDT" +
		"6P6$6gNe6SIfpdnhCdLzf1fRW8EEKd$KuqymuZ5GABr6AvM5neeymEoJJAYByIgN8Zfdfa0" +
		"GotHCIfpMoq9zn1iUCCpo1E6#4n5cCN#9NZ7DNp3Xt9n3dQ4YSNsCU$vNYtfXnbfv1d4ZFE" +
		"COPZyburDbluJCSkT#k9Ukd#1bgeej$pyhw6Anrt1$DqCxP7swiHnnMP5PtilzbMXCMeotQ" +
		"uEOOKV9nXN8VYy7gZIkLDIi6gm1rbJKp1kigvJo99rnPhpYiDDHJNbSCmdQyvCejSRWtaPs" +
		"kxASvwtDG72D#0sK#W#TYnc#alEvOYTUYn4$J#FCPrLyHexBa0vIXSR1MXx7IC0dJyH1#Zu" +
		"UZZfI69jg$3ClahvZhoXbbZ5GkVt7bNAVZ#2EzwChPXDtyLuPVn9NpLjal#rquyUoZ6pN2D" +
		"ZaW6#BgyOFd#$BuLqmq$nWiu8hPmNNZjqVBMwhjelznl6oic39MxaLOYEUflMhuzs8BzXbs" +
		"K4j3fgwK$PY2rt5CrrjxzUOYHsKtH$PGVo#LVLKMgXocSgJA5Ih7o56yZSFo6YCSmLjuGVu" +
		"Dy$TcGDk9UrIpisx6tYrO3J9PSLlo2xLcxSrY1Mx733i4lfJ5ku#Nzvqgl3UUxzmnRBx5Ib" +
		"pPtpwHalLSIcLBBTxnx9f#EMjr7LRYy1EhEcjQeh5xywpw$yJkmbCtcoTa3YjwBi$9Rgoi$" +
		"cnw9fpz89xY$LbjUlAKBsJ5AUAfaSmAc45cAi$ZyEmJZUEMUpAhQ3tMhbH6ExTnaXaZaqYD" +
		"Y1F$2E1NIkKz#zncwkNTnixs#dCSfmdtz0sCC#GSnwb7dkUiVhT8JsF6yN1sherploMHLOD" +
		"ts9H03ZLZiEpzKPChrDuVRgnqXnMPLGFwAiTlmWfPGcOykJIDY#M9YzKt1gkIay8vScFrqF" +
		"SAygxXtye3NRd93hU#mVOomppUVBuzleVpzrtZMnhVvwmsUnwYizAfcRKwb6NnfbdNkMDV7" +
		"NMaO4v9t4Nfhgl7uj#1mP4oNEVUChw17IdFbPFYl5FyETUCai#txwFWtALmZ7Xw$E3vlZn#" +
		"Eve$Zpi$YNDOkHiAd0ffQpteB#QE3wwOf43bJY8dw6$4lpwyXXtKBADk3dCgl7#zLNhFbin" +
		"ZrlRjodwFXboJ1MWenWz30re6XgjcPmqS7#k$K#u0h1g0RnPbCzfBYUhKi#tsHC3VTC1JZQ" +
		"ZZjprz#BWCyAwcx4svYx8MvNxAVCgZb1cKxr0EeJn9C4VlAQ8LyHMHonnzb8MK5rFUJNafv" +
		"JX$3DyLn46YFdrFK3PXtAR1dAnwz3MdhxtXku$SnPH3DS#wv6HHdd9$BszLSfjhl2xahLL$" +
		"RThTQN#XRGNKYrGVJ7sqwgEeJzBO9NoyJ#HessYspQ4$XSWXRbJ$0$Ile3rSxOcqzz1#YBA" +
		"5ZZLMfJsNSrN$a3Yfyp6RETQXVIJ#ERJ#nl5hX$bEyp63VdvRwnEEsKxVVun#lzk8QLHs1l" +
		"juk1Pyz7dcgVqUSO9zsgZzfS7THt#QyRql81ZBsrPjpZ4unzQX8CTdvrD1L0tDrVUvvfogV" +
		"UzI#IB1x#pTHemdRuhokTPyyrMVJCmnnjf2SCrw9r1k9LOI2upsOq2L2rL$b#2QybMkXHD1" +
		"7kzxmAT4RzlcLdoPOgQPToBWE1yOCQxIRzbOfSwH9rzbiSfxLKvLkL3bPfK7L7wbtosm5gY" +
		"tLDbTvSFXEV6zPqVwB0dZp8$d$SXR56OlCVGLXhx6q3U4zc7z1$PfsnRrPMbULwf$XzhwNh" +
		"xTVkaH#lfeMrVZVSOhRpcH7VJxn$sku9WbnfZbAWyRxHsPM#UmzpmTQlldzynZUzFr7JSRy" +
		"VPgZC9GhlMnBRaEAwAFvoa9jNszZFuPBlobHdk1qM#9VOOPRMMHVN6SsNmZ5GZyP8$ibbso" +
		"KrwI7R9TjibMsIBBPPaibILIvZ0s4yyGvSHSWZL2dYAU97YU2Cz7cKcmtiZZn6CoXS#dYTb" +
		"E$#aoJKTwHARAeuwsqNckayaoIIRA11alQydQH5#Ph77QocIr8rSvpvNESuNc$8fALYnPhF" +
		"hpWJTQAC$A0aURH$nP$gJ#u$AbV26dvL$okNmcf#HJ#QVyW$wJydVvnFWYF1$aXEhlotkgl" +
		"QEIrL$UbcEE$f6ygzu$gdnEvglsWYoogvWS8GuHRyh1G8GtdES#vxbNNeNnazVbC9zVot$L" +
		"$W$1Knwb6CLxsY1gWtYZ6Uh0uft1v$mFKauKT3LmAv6ho6O$djEyjtaTtCwnXz5VYMuSlpi" +
		"vnPJ5jFjIpoG$a$Pm1nPlLFPTqKjOA69R4UK8jesWx4Tfep$rEuX2Lfb2tZ87a3U0za3s6q" +
		"ZPW$9cZfDFRZxjbefMCT26$2poMr3QTuKI#aPod96KRIdR4Us93aH7eZNz9ZgnNoU#Rq$O$" +
		"$TbuHRApinlCBc3QVUYpRiMuULjCXoUABeRh02QE$0H7jvDhGZS#J$ga3Nw");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};
 
	static class Events extends beaver.Parser.Events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
			System.err.format("*** " + msg + " ligne %d, colonne %d\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()));
		}
		
	private Environment typeEnvironment = new Environment("types");
	private Environment procedureEnvironment = new Environment("procedures");
	private StackEnvironment stackEnvironment = new StackEnvironment("local variables stack");
	private String type_declaration_name;

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] program = type_declaration_part variable_declaration_part procedure_definition_part TOKEN_BEGIN statement_list TOKEN_END; returns 'TOKEN_END' although none is marked
			Action.NONE,  	// [1] type_declaration_part = 
			RETURN2,	// [2] type_declaration_part = TOKEN_TYPE type_declaration_list; returns 'type_declaration_list' although none is marked
			new Action() {	// [3] type_declaration_list = type_declaration_list type_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [4] type_declaration_list = type_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN4,	// [5] type_declaration = type_declaration_head TOKEN_AFF type TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.RETURN,	// [6] type_declaration_head = TOKEN_IDENTIFIER
			Action.RETURN,	// [7] type = simple_type
			Action.RETURN,	// [8] type = named_type
			Action.RETURN,	// [9] type = index_type
			Action.RETURN,	// [10] type = array_type
			Action.RETURN,	// [11] type = pointer_type
			Action.RETURN,	// [12] type = structure_type
			Action.RETURN,	// [13] simple_type = TOKEN_STRING
			Action.RETURN,	// [14] simple_type = TOKEN_INTEGER
			Action.RETURN,	// [15] simple_type = TOKEN_BOOLEAN
			Action.RETURN,	// [16] named_type = TOKEN_IDENTIFIER
			Action.RETURN,	// [17] index_type = enumerated_type
			Action.RETURN,	// [18] index_type = subrange_type
			RETURN4,	// [19] enumerated_type = init_enumerated_type TOKEN_LPAR identifier_list TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			Action.NONE,  	// [20] init_enumerated_type = 
			RETURN3,	// [21] subrange_type = TOKEN_LIT_INTEGER TOKEN_DOTDOT TOKEN_LIT_INTEGER; returns 'TOKEN_LIT_INTEGER' although none is marked
			RETURN3,	// [22] subrange_type = TOKEN_IDENTIFIER TOKEN_DOTDOT TOKEN_IDENTIFIER; returns 'TOKEN_IDENTIFIER' although none is marked
			RETURN6,	// [23] array_type = TOKEN_ARRAY TOKEN_LBRACKET range_type TOKEN_RBRACKET TOKEN_OF type; returns 'type' although none is marked
			Action.RETURN,	// [24] range_type = enumerated_type
			Action.RETURN,	// [25] range_type = subrange_type
			Action.RETURN,	// [26] range_type = named_type
			RETURN2,	// [27] pointer_type = TOKEN_CIRC type; returns 'type' although none is marked
			RETURN4,	// [28] structure_type = TOKEN_STRUCT TOKEN_LBRACE feature_list_type TOKEN_RBRACE; returns 'TOKEN_RBRACE' although none is marked
			new Action() {	// [29] feature_list_type = feature_list_type feature_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [30] feature_list_type = feature_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN4,	// [31] feature_type = TOKEN_IDENTIFIER TOKEN_COLON type TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.NONE,  	// [32] variable_declaration_part = 
			RETURN2,	// [33] variable_declaration_part = TOKEN_VAR variable_declaration_list; returns 'variable_declaration_list' although none is marked
			new Action() {	// [34] variable_declaration_list = variable_declaration_list variable_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [35] variable_declaration_list = variable_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN4,	// [36] variable_declaration = identifier_list TOKEN_COLON type TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			new Action() {	// [37] identifier_list = identifier_list TOKEN_COMMA TOKEN_IDENTIFIER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [38] identifier_list = TOKEN_IDENTIFIER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.NONE,  	// [39] procedure_definition_part = 
			Action.RETURN,	// [40] procedure_definition_part = procedure_definition_list
			new Action() {	// [41] procedure_definition_list = procedure_definition_list procedure_definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [42] procedure_definition_list = procedure_definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN2,	// [43] procedure_definition = procedure_definition_head block; returns 'block' although none is marked
			RETURN2,	// [44] procedure_definition = procedure_declaration_head TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.RETURN,	// [45] procedure_definition_head = procedure_head
			Action.RETURN,	// [46] procedure_declaration_head = procedure_head
			RETURN5,	// [47] procedure_head = TOKEN_PROCEDURE TOKEN_IDENTIFIER TOKEN_LPAR argt_part TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			RETURN7,	// [48] procedure_head = TOKEN_FUNCTION TOKEN_IDENTIFIER TOKEN_LPAR argt_part TOKEN_RPAR TOKEN_COLON type; returns 'type' although none is marked
			Action.NONE,  	// [49] argt_part = 
			Action.RETURN,	// [50] argt_part = argt_list
			new Action() {	// [51] argt_list = argt_list TOKEN_COMMA argt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [52] argt_list = argt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN3,	// [53] argt = TOKEN_IDENTIFIER TOKEN_COLON type; returns 'type' although none is marked
			RETURN4,	// [54] block = variable_declaration_part TOKEN_BEGIN statement_list TOKEN_END; returns 'TOKEN_END' although none is marked
			new Action() {	// [55] statement_list = statement_list statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [56] statement_list = statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [57] statement = simple_statement
			Action.RETURN,	// [58] statement = structured_statement
			Action.RETURN,	// [59] simple_statement = assignment_statement
			Action.RETURN,	// [60] simple_statement = procedure_statement
			Action.RETURN,	// [61] simple_statement = new_statement
			Action.RETURN,	// [62] simple_statement = dispose_statement
			Action.RETURN,	// [63] simple_statement = println_statement
			Action.RETURN,	// [64] simple_statement = readln_statement
			Action.RETURN,	// [65] simple_statement = return_statement
			RETURN4,	// [66] assignment_statement = variable_access TOKEN_AFF expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN2,	// [67] procedure_statement = procedure_expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN4,	// [68] procedure_expression = TOKEN_IDENTIFIER TOKEN_LPAR expression_part TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			Action.NONE,  	// [69] expression_part = 
			Action.RETURN,	// [70] expression_part = expression_list
			new Action() {	// [71] expression_list = expression_list TOKEN_COMMA expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [72] expression_list = expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN3,	// [73] new_statement = TOKEN_NEW variable_access TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [74] dispose_statement = TOKEN_DISPOSE variable_access TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [75] println_statement = TOKEN_PRINTLN expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [76] readln_statement = TOKEN_READLN expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [77] return_statement = TOKEN_RETURN expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.RETURN,	// [78] structured_statement = block
			Action.RETURN,	// [79] structured_statement = if_statement
			Action.RETURN,	// [80] structured_statement = while_statement
			Action.RETURN,	// [81] structured_statement = switch_statement
			RETURN4,	// [82] if_statement = TOKEN_IF expression TOKEN_THEN if2_statement; returns 'if2_statement' although none is marked
			RETURN6,	// [83] if_statement = TOKEN_IF expression TOKEN_THEN if2_statement TOKEN_ELSE statement; returns 'statement' although none is marked
			RETURN4,	// [84] if2_statement = TOKEN_IF expression TOKEN_THEN statement; returns 'statement' although none is marked
			Action.RETURN,	// [85] if2_statement = statement
			RETURN4,	// [86] while_statement = TOKEN_WHILE expression TOKEN_DO statement; returns 'statement' although none is marked
			RETURN5,	// [87] switch_statement = TOKEN_SWITCH expression TOKEN_BEGIN case_statement_list TOKEN_END; returns 'TOKEN_END' although none is marked
			RETURN3,	// [88] case_statement_list = case_statement_list case_statement case_default; returns 'case_default' although none is marked
			Action.RETURN,	// [89] case_statement_list = case_statement
			RETURN4,	// [90] case_statement = TOKEN_CASE identifier_list TOKEN_COLON statement; returns 'statement' although none is marked
			Action.NONE,  	// [91] case_default = 
			RETURN3,	// [92] case_default = TOKEN_DEFAULT TOKEN_COLON statement; returns 'statement' although none is marked
			RETURN3,	// [93] expression = expression TOKEN_PLUS expression; returns 'expression' although none is marked
			RETURN3,	// [94] expression = expression TOKEN_MINUS expression; returns 'expression' although none is marked
			RETURN3,	// [95] expression = expression TOKEN_TIMES expression; returns 'expression' although none is marked
			RETURN3,	// [96] expression = expression TOKEN_DIV expression; returns 'expression' although none is marked
			RETURN2,	// [97] expression = TOKEN_MINUS expression; returns 'expression' although none is marked
			RETURN3,	// [98] expression = expression TOKEN_OR expression; returns 'expression' although none is marked
			RETURN3,	// [99] expression = expression TOKEN_AND expression; returns 'expression' although none is marked
			RETURN2,	// [100] expression = TOKEN_NOT expression; returns 'expression' although none is marked
			RETURN3,	// [101] expression = expression TOKEN_LT expression; returns 'expression' although none is marked
			RETURN3,	// [102] expression = expression TOKEN_LE expression; returns 'expression' although none is marked
			RETURN3,	// [103] expression = expression TOKEN_GT expression; returns 'expression' although none is marked
			RETURN3,	// [104] expression = expression TOKEN_GE expression; returns 'expression' although none is marked
			RETURN3,	// [105] expression = expression TOKEN_EQ expression; returns 'expression' although none is marked
			RETURN3,	// [106] expression = expression TOKEN_NE expression; returns 'expression' although none is marked
			RETURN3,	// [107] expression = TOKEN_LPAR expression TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			Action.RETURN,	// [108] expression = procedure_expression
			Action.RETURN,	// [109] expression = variable_access
			Action.RETURN,	// [110] expression = literal
			Action.RETURN,	// [111] variable_access = TOKEN_IDENTIFIER
			RETURN4,	// [112] variable_access = variable_access TOKEN_LBRACKET expression TOKEN_RBRACKET; returns 'TOKEN_RBRACKET' although none is marked
			RETURN2,	// [113] variable_access = expression TOKEN_CIRC; returns 'TOKEN_CIRC' although none is marked
			Action.RETURN,	// [114] literal = TOKEN_LIT_INTEGER
			Action.RETURN,	// [115] literal = TOKEN_LIT_STRING
			Action.RETURN,	// [116] literal = TOKEN_TRUE
			Action.RETURN,	// [117] literal = TOKEN_FALSE
			Action.RETURN	// [118] literal = TOKEN_NULL
		};

 
	report = new Events();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
