package main;

import environment.*;
import java.util.Iterator;
import type.*;
import beaver.*;
import node.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjM0Tq55KKlJExLaGJ54oK86998IW8g4WYeHb24GWn54D7X2XYWoYAWWegKWo82egYKH0" +
		"414MnWO20e1J1ti3U01jsmUUTcRUxCxFBciGSp$4STy#T#yh$x$t$P$wVjmi4bo8VjT09BT" +
		"0NDR04X#1GLCDXg8x3SGGIa8WZSHHgeZ5oS0PoqHJja8Vsw80di1IBSI2UmjEo0pVBJZo4Z" +
		"cYEinYh19TY88QXCxgX43rHXA4n8XnKwTnjq0efw0yJcvXx5kRZ4Sp3SJWUnw949fGZzm1a" +
		"CS9aZlHeHaZISMi41A8Yk4TwS0L6MZiIcNdgkF8Sm95AbUMfgv57oGxcgQVQrRY6iod10t7" +
		"p3Av0dXCrSbyyoJmdgpO3Yz3oR$CCgK2U5AHfx2pckGntwRrPWDRCSsxSF1TNA4#6vkd7F5" +
		"lmgkQva9bAS7dSF2Cha2TJiro9AvZd5DL6e8pV4eoEc#Un$UP9GKEDT9hd2Ju69#0aUfEHY" +
		"dJKHmESYaQunUEzbNwtjokQUNlBsnx$58yt2pqytXHCnzbeegDOYsTy8pdVq$eydxUFnpl9" +
		"vytoU6$tU6V8CnwlSmxTZTdiTxgEfYscoYPSuEatdC#gT$mlu2BCn4JSWPim3kDzQ$6Mf$M" +
		"zlX7Uv$6MURpMMhYzqS$6B5oF2RWDr#8wZC5Ot80RSQQE$NvvDkmlTVb3jcanRFV4iBqOm$" +
		"PA3DisborwfFzR$biMPpSyY5KgFOmvyWMcgfOIakHphC4eQlPpAvifFOhdiSAr6o9I6QwAQ" +
		"NSYVOQv6dqZwmCh0#i3B4IGKWhkr9tnkBqpbcc#hROMAsOAidKVF4lvEIpN$YbsZ$ZoAfUy" +
		"qfRFqLZvwA9SO7DtjVTIxgqyIBbO#HBbDNY3xubLM8rrs82Ny3BMSwrUv$SrRCLc#GrH7wv" +
		"fC$PjphCic#Ta2zwfbgnXMhEIQSjnvORlcC6Q9i3LEe2LrK5s1T27xu2UF6q7y1sHeDvGh2" +
		"I#ku$X$6fpvdKurxgSRNI4#fNEFOnpDfXx4C#Z15PtdVZcxQpleYIUeUN9dKRhKBREP8JGE" +
		"48HigCYL7QaxiW9FYs9Dw2gynGoRYHFRvxmIVncL7aUgryaZyayWIhDOuHxfZ5FVPuXphrf" +
		"oDeXYNL6rUUnrgqNwm4dJrDcIkBpNTNhTWOhkCYwfRAT#O$c4shdVOATUinWt1fQaTN2qNp" +
		"Bkxqc$Mvl8bVMspl1uq$tUDDyiGrMUkdXKJHW9Hbl98bnlMa#Rvh7syWtYsIFrrdt8beZQv" +
		"F1jici0RsrQePl$1ciorBv2#K4$fOuYRyWugs5V$m1tnZSNcijl9dypqRe$Eh2MZUVjNO1w" +
		"z38VawEwVytRB5so$#M$vB5qKtxQqcd4kbyBXtD24lfh3KAgJdFRJAbtkY7$gxT495C$Xw9" +
		"RNSY5QbarGTM1gi#AEIldEhKYZN3nVRE2EsYH5kB5TDmlM6iNHOweGoxHtpPTCdTRTb$LbQ" +
		"Mkzll2TC#lPCvgbHxhQmrJcGrCGIP4lLXE#3DCKxHbKfS21Zxo0k8ouWQn0hBNndmKq0qPi" +
		"mF8hR0ORoSJwv9lfPSXpoFRELVJ6x8zkt9pSZNaLi1mGRa3kGcPCOCTYBt9dSZ3oRt90ydz" +
		"oLVHUmbnbA$W3o1SNP5yXjfj4qZxtNPZWVCPUGMZcxciiszv1jYpyiiPTiydS$3bFUeVJRr" +
		"HUHqzJ6cMKtbbPJhgRo1SYFDVIKlZ84kwjj6Nmw5T#Wh9Agh$JtQErDlgVgdr2#YNaIaQgm" +
		"nodSH8rHUJgpG#x6UVRWcnfBotqDZ7V6xR$vSBrO3C7PIvdqBxD8nVQzzVg2TzyUew#fZtP" +
		"jVoRUgVZynbyZNljz6sWPU8lQuz2q4roFmfwC7Q$72UspCyuthHftdszekKvdFLB0haSyOt" +
		"v6pjNqloiNQPYHz#oAnWhp$mLd4J68yCOgev$8$I9IfV0t1TGXELtrqg1qtsUyawtdTh3hd" +
		"XbxbNV$zWPyydpvIURJoVEKbojkLFtFOE58vLtcKybZbESeQnzZjiDb4UMhqc8Ar$3RETxU" +
		"lJLRvvXVCyUbjN78xbzpH9NVnzk4x1vYilWArhLR#MUqzT7uPgXVfkDVIrbHzNICnZJuEM$" +
		"iSfH6xEQ8yy$hxUQEcA#OuvIaHMs0ZzSEzVSmPFltgokKElAzpzDnRhaNe$DWUf#y2hnuyr" +
		"ZMUikZsmLOk$qANFOVvCrs#PT5zyIP7zQViGFWZwsMTh9KrygAibbMoKbwG5R945ijZiaXA" +
		"xHRBXJjM7Y1c4pnzv3w2krpk8MOGTnCyEULEOZfn1y4JG6RQ$QV9L8rK9hVBGxRqd7rzMgR" +
		"8P9aa4#KsMSPMpzDMAa$Plb9vqkQbzlK9#$guZdc3Cj#sib3bHyCpcYzpP9ujyUqWs#K3jR" +
		"ydlyelyhFy93$A7lb1lfVlv5lQlv9lPBThHRuaFbNv4$bOfG#LTn7loZks$BLyfDRtbUVA8" +
		"zOv9TOwlqwy9jl2SL#rhnljwylo2bmVsI9lyBfFzghEiq$#e302mrdz3Q8qYFN841i6wvKW" +
		"Am63rNriT7MX4v6lE9VzEZ9MPrOv5henzb3xVnC71On$7jiKaukf5r7EPljikqgqOB2I3BB" +
		"#2n06gq0G1ki$ap1O8vesh4fn036GvyX0rgxzsAuVzVxirv$SdNmsu$HWsnxKMoXoug0Lsx" +
		"Tc##RaInZF#iTe6ECC8xSXjoNE8NA9TaHBsjt8urppsBSzqO7Z6imsWsdlIPtL6n5WFMWGG" +
		"S9aTHZmmToF70j665anSEbV$X$zrG==");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};
 
	static class Events extends beaver.Parser.Events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
		System.err.format("*** " + msg + " ligne %d, colonne %d\n",
			Symbol.getLine(token.getStart()),
			Symbol.getColumn(token.getStart()));
	}
		
	private Environment typeEnvironment = new Environment("types");
	private Environment procedureEnvironment = new Environment("procedures");
	private StackEnvironment stackEnvironment = new StackEnvironment("local variables stack");
	private String type_declaration_name;
	
	public void backtrace() 
	{
		typeEnvironment.backtrace();
		procedureEnvironment.backtrace();
		stackEnvironment.backtrace();
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] program = type_declaration_part variable_declaration_part procedure_definition_part TOKEN_BEGIN statement_list TOKEN_END; returns 'TOKEN_END' although none is marked
			Action.NONE,  	// [1] type_declaration_part = 
			RETURN2,	// [2] type_declaration_part = TOKEN_TYPE type_declaration_list; returns 'type_declaration_list' although none is marked
			new Action() {	// [3] type_declaration_list = type_declaration_list type_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [4] type_declaration_list = type_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN4,	// [5] type_declaration = type_declaration_head TOKEN_AFF type TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.RETURN,	// [6] type_declaration_head = TOKEN_IDENTIFIER
			Action.RETURN,	// [7] type = simple_type
			Action.RETURN,	// [8] type = named_type
			Action.RETURN,	// [9] type = index_type
			Action.RETURN,	// [10] type = array_type
			Action.RETURN,	// [11] type = pointer_type
			Action.RETURN,	// [12] type = structure_type
			Action.RETURN,	// [13] simple_type = TOKEN_STRING
			Action.RETURN,	// [14] simple_type = TOKEN_INTEGER
			Action.RETURN,	// [15] simple_type = TOKEN_BOOLEAN
			Action.RETURN,	// [16] named_type = TOKEN_IDENTIFIER
			Action.RETURN,	// [17] index_type = enumerated_type
			Action.RETURN,	// [18] index_type = subrange_type
			RETURN4,	// [19] enumerated_type = init_enumerated_type TOKEN_LPAR identifier_list TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			Action.NONE,  	// [20] init_enumerated_type = 
			RETURN3,	// [21] subrange_type = TOKEN_LIT_INTEGER TOKEN_DOTDOT TOKEN_LIT_INTEGER; returns 'TOKEN_LIT_INTEGER' although none is marked
			RETURN3,	// [22] subrange_type = TOKEN_IDENTIFIER TOKEN_DOTDOT TOKEN_IDENTIFIER; returns 'TOKEN_IDENTIFIER' although none is marked
			RETURN6,	// [23] array_type = TOKEN_ARRAY TOKEN_LBRACKET range_type TOKEN_RBRACKET TOKEN_OF type; returns 'type' although none is marked
			Action.RETURN,	// [24] range_type = enumerated_type
			Action.RETURN,	// [25] range_type = subrange_type
			Action.RETURN,	// [26] range_type = named_type
			RETURN2,	// [27] pointer_type = TOKEN_CIRC type; returns 'type' although none is marked
			RETURN4,	// [28] structure_type = TOKEN_STRUCT TOKEN_LBRACE feature_list_type TOKEN_RBRACE; returns 'TOKEN_RBRACE' although none is marked
			new Action() {	// [29] feature_list_type = feature_list_type feature_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [30] feature_list_type = feature_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN4,	// [31] feature_type = TOKEN_IDENTIFIER TOKEN_COLON type TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.NONE,  	// [32] variable_declaration_part = 
			RETURN2,	// [33] variable_declaration_part = TOKEN_VAR variable_declaration_list; returns 'variable_declaration_list' although none is marked
			new Action() {	// [34] variable_declaration_list = variable_declaration_list variable_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [35] variable_declaration_list = variable_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN4,	// [36] variable_declaration = identifier_list TOKEN_COLON type TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			new Action() {	// [37] identifier_list = identifier_list TOKEN_COMMA TOKEN_IDENTIFIER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [38] identifier_list = TOKEN_IDENTIFIER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.NONE,  	// [39] procedure_definition_part = 
			Action.RETURN,	// [40] procedure_definition_part = procedure_definition_list
			new Action() {	// [41] procedure_definition_list = procedure_definition_list procedure_definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [42] procedure_definition_list = procedure_definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN2,	// [43] procedure_definition = procedure_definition_head block; returns 'block' although none is marked
			RETURN2,	// [44] procedure_definition = procedure_declaration_head TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.RETURN,	// [45] procedure_definition_head = procedure_head
			Action.RETURN,	// [46] procedure_declaration_head = procedure_head
			RETURN5,	// [47] procedure_head = TOKEN_PROCEDURE TOKEN_IDENTIFIER TOKEN_LPAR argt_part TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			RETURN7,	// [48] procedure_head = TOKEN_FUNCTION TOKEN_IDENTIFIER TOKEN_LPAR argt_part TOKEN_RPAR TOKEN_COLON type; returns 'type' although none is marked
			Action.NONE,  	// [49] argt_part = 
			Action.RETURN,	// [50] argt_part = argt_list
			new Action() {	// [51] argt_list = argt_list TOKEN_COMMA argt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [52] argt_list = argt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN3,	// [53] argt = TOKEN_IDENTIFIER TOKEN_COLON type; returns 'type' although none is marked
			RETURN4,	// [54] block = variable_declaration_part TOKEN_BEGIN statement_list TOKEN_END; returns 'TOKEN_END' although none is marked
			new Action() {	// [55] statement_list = statement_list statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [56] statement_list = statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [57] statement = simple_statement
			Action.RETURN,	// [58] statement = structured_statement
			Action.RETURN,	// [59] simple_statement = assignment_statement
			Action.RETURN,	// [60] simple_statement = procedure_statement
			Action.RETURN,	// [61] simple_statement = new_statement
			Action.RETURN,	// [62] simple_statement = dispose_statement
			Action.RETURN,	// [63] simple_statement = println_statement
			Action.RETURN,	// [64] simple_statement = readln_statement
			Action.RETURN,	// [65] simple_statement = return_statement
			RETURN4,	// [66] assignment_statement = variable_access TOKEN_AFF expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN2,	// [67] procedure_statement = procedure_expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN4,	// [68] procedure_expression = TOKEN_IDENTIFIER TOKEN_LPAR expression_part TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			Action.NONE,  	// [69] expression_part = 
			Action.RETURN,	// [70] expression_part = expression_list
			new Action() {	// [71] expression_list = expression_list TOKEN_COMMA expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [72] expression_list = expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN3,	// [73] new_statement = TOKEN_NEW variable_access TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [74] dispose_statement = TOKEN_DISPOSE variable_access TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [75] println_statement = TOKEN_PRINTLN expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [76] readln_statement = TOKEN_READLN expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [77] return_statement = TOKEN_RETURN expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.RETURN,	// [78] structured_statement = block
			Action.RETURN,	// [79] structured_statement = if_statement
			Action.RETURN,	// [80] structured_statement = while_statement
			Action.RETURN,	// [81] structured_statement = switch_statement
			RETURN6,	// [82] if_statement = TOKEN_IF expression TOKEN_THEN statement TOKEN_ELSE statement; returns 'statement' although none is marked
			RETURN4,	// [83] if_statement = TOKEN_IF expression TOKEN_THEN statement; returns 'statement' although none is marked
			RETURN4,	// [84] while_statement = TOKEN_WHILE expression TOKEN_DO statement; returns 'statement' although none is marked
			RETURN5,	// [85] switch_statement = TOKEN_SWITCH expression TOKEN_BEGIN case_statement_list TOKEN_END; returns 'TOKEN_END' although none is marked
			RETURN3,	// [86] case_statement_list = case_statement_list case_statement case_default; returns 'case_default' although none is marked
			Action.RETURN,	// [87] case_statement_list = case_statement
			RETURN4,	// [88] case_statement = TOKEN_CASE identifier_list TOKEN_COLON statement; returns 'statement' although none is marked
			Action.NONE,  	// [89] case_default = 
			RETURN3,	// [90] case_default = TOKEN_DEFAULT TOKEN_COLON statement; returns 'statement' although none is marked
			Action.RETURN,	// [91] variable_access = TOKEN_IDENTIFIER
			RETURN4,	// [92] variable_access = variable_access TOKEN_LBRACKET expression TOKEN_RBRACKET; returns 'TOKEN_RBRACKET' although none is marked
			RETURN2,	// [93] variable_access = expression TOKEN_CIRC; returns 'TOKEN_CIRC' although none is marked
			RETURN3,	// [94] expression = expression TOKEN_PLUS expression; returns 'expression' although none is marked
			RETURN3,	// [95] expression = expression TOKEN_MINUS expression; returns 'expression' although none is marked
			RETURN3,	// [96] expression = expression TOKEN_TIMES expression; returns 'expression' although none is marked
			RETURN3,	// [97] expression = expression TOKEN_DIV expression; returns 'expression' although none is marked
			RETURN2,	// [98] expression = TOKEN_MINUS expression; returns 'expression' although none is marked
			RETURN3,	// [99] expression = expression TOKEN_OR expression; returns 'expression' although none is marked
			RETURN3,	// [100] expression = expression TOKEN_AND expression; returns 'expression' although none is marked
			RETURN2,	// [101] expression = TOKEN_NOT expression; returns 'expression' although none is marked
			RETURN3,	// [102] expression = expression TOKEN_LT expression; returns 'expression' although none is marked
			RETURN3,	// [103] expression = expression TOKEN_LE expression; returns 'expression' although none is marked
			RETURN3,	// [104] expression = expression TOKEN_GT expression; returns 'expression' although none is marked
			RETURN3,	// [105] expression = expression TOKEN_GE expression; returns 'expression' although none is marked
			RETURN3,	// [106] expression = expression TOKEN_EQ expression; returns 'expression' although none is marked
			RETURN3,	// [107] expression = expression TOKEN_NE expression; returns 'expression' although none is marked
			RETURN3,	// [108] expression = TOKEN_LPAR expression TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			Action.RETURN,	// [109] expression = procedure_expression
			Action.RETURN,	// [110] expression = variable_access
			Action.RETURN,	// [111] expression = literal
			Action.RETURN,	// [112] literal = TOKEN_LIT_INTEGER
			Action.RETURN,	// [113] literal = TOKEN_LIT_STRING
			Action.RETURN,	// [114] literal = TOKEN_TRUE
			Action.RETURN,	// [115] literal = TOKEN_FALSE
			Action.RETURN	// [116] literal = TOKEN_NULL
		};

 
	report = new Events();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
