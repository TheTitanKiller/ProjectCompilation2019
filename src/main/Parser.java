package main;

import environment.*;
import type.*;
import beaver.*;
import node.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjc0cK5DKLXczr5ovHT80e3EfeH9XXs451Hq0Orb54P5C6Ch89mn8Mbu0YA9heiCW8BeZ" +
		"YXWEAY8WiWee8YYYB2w2Y4fHi9iR4BJ4BnkjNrRUdgvTf608vntFiEd$zzztxwlxllQfwzL" +
		"wBk4kabzIKxj9E1aeDUKP#8iV9yL9LJf0J9KEgINNvgPma9qjxELlEbQxIKWhaGhb8kacMl" +
		"26hv6XvLjRgNd7b33bJJfKtvIof9nDbXGoLCT93UijbKYW$bv4fCXppFsYlH7kmQRSnxLeH" +
		"RNtl8BI7oCNIMiv7Uo8PCitUB3V8SxH#GLA6O4kFhLHBtvCTqaawI1YT#o8jrUzibDuwZ3g" +
		"dMH$krRqeHKQaYkbCJAipl58wfvlEKUYewRGndVoqEYCgfVCpq#b8RmQPpYMcKvnMvnULqg" +
		"bZEalHkTfqhZMTQzBgJAYKJbtJ#IKwPQRZdSlGcPPMv#aATR8asxBsbBuonRAUuhS#IsfBZ" +
		"kHAGsaiJQLvNAmDHp2M9NbItp8DbDK9UPPNc6Uyz4l8ypPF#mNIm7B5vnbGOPuikI9DxF4q" +
		"iRaLniOH3SQ6nKMdowo4be#MHjRgIN97WigJ5QhCbklYOibt$a6vIMR8J9aiDyfKkLbkaLz" +
		"94rEwHzUKn#S4ub7VNIbyyrFuNadXsvx2jolWIsxfZvuVbgT4hj9FPI5VbH9cBy#Q9o7iEt" +
		"tx$dBh8SbIR9w29R9Odi2AFC5bShlSBR#MM#MscANFflAIgzJFzGXMPzzwWFV257IhF5oUT" +
		"O4yYjtCdl0MnY#bpBeeO9zZDREabLcFwH$r3vRrFFErDUvYt4ikDUxZy#NcxszSP7obyIZZ" +
		"iSOb#gxVcqsoINylwsGBR$yosSYnWF5Pp$6KN2zhz2rvLPwN5#K58XlaPTrEUREynchXTTc" +
		"gstIRlCknJNRglqJa7TgRH$xMpBDjcG$RSVVoMGDqP2NGcRPtjNleSB$2h9sgo56if8xXYn" +
		"zY$Xr4BuRmHSXWpehC$EVwCtyjlX6rcNTEvLllVOVFu1kPdA71OTBECUs6ffrHAMslVjHkn" +
		"5Ug2PxSf0o7tj81V2N7CiUtGSUnbcPOIqSUHftebIt8dc4wmqsdrX7GyLJ4T79C9tm4T383" +
		"$QbcEkSS0PscgFGtdLQcC#88w6G7dWFlxA3J#11rObch#KTmzHNoLryrRFrLCowMmn6CXHZ" +
		"be69ydluLvYbEq8WyxVNBSnriUzB7YjB4HbSOoo0QZ9qT5tMIHg1bUQlxqeDubIigL6d66Z" +
		"uOIxxptTY$TMS$q8FvloUpVs$c$wXISyOzLVp$uKjkwO#U7vgdWUznE9hwLX6h1uSdqxEpo" +
		"wqmLux7ZZu5LUq9TbYlr65lK9VTGSpAJEbrM8zukJAnSdsh6bcZ2fcyCz6ikRut#eH7EJTb" +
		"riO1ErepDgUvl8VHDp4nt#5YXtd2wy5b7FNPqHRIasn$HBr#3EReozllpQqEEyXCwZhKpFQ" +
		"v4PucM9d#uLsJpHgaeIgrHNRVn4bLFuUAGJ$mX8XpF3mULCVEykeS2lYT1rgGOq$C5zfFUQ" +
		"L8s8MNmrKZ$l39ngU3Bq2EY7iAt0ndRJWFlXpk02#5ky7xu3xaEGakWWlWuLpN6Hv7UJ9y7" +
		"Vnfe4t$mNSpxGYqqwb3UH7Sojh0U8Hdu1kLkb#XgTJjP7NlmjvX$bBA3r3UQJ5oXaumUnds" +
		"MMQlmMvkslcS5e8U5jj0h1t6#yJgWkZuRC7VdN9xA##aF81oR#mLbgkNyMnmhTbhmNhh#q3" +
		"gxg6ywq3tBZ0sz2zqVKB$qNIdm8F067BkipPzOl6Ps1zZh8fT4zu4FkEwuwpyD$0j#2vITd" +
		"DYTLrMRMv1eCmukFN002kJtnrCsnR7jyiTP$tymCfJZRdVxfs0lhZJm6Jp7mlccdqrg1x8T" +
		"I#u7t0$tUcW1Dm8QWRgF0hAp9u4JWFph7n3eE$eomJUitNmRPuFUpDKUA3nFn3u5IIKbnX$" +
		"566dXd4Nuqd6Yuot6dyPuL0tOnkxy5V6trY$xFwv6SQrazla9iqP$3ear3dpuFhdraievmR" +
		"inW6xUS1kcQ1T1SooM9xvDXf7#zKsmawkbVEjl1eqCBjkBATJ5E5GYtZjqD23wTU1#nrU7B" +
		"D3rnXF2UX$JPsI#6j22UNmzaFJZewHCoVevvdTR$wjAQvfRTmmmPyVQD#SX9ZDeMwZG9tvC" +
		"PirO43BcwEJTMKtBVklxfN0Jr$LL$HbtQWRz2LTho$gEdr1b#bJkbIVr5A$nlFwCEU7m8E0" +
		"TrpdW$l0FC2xhtF1FU1kmBoXp1$AVA1p$EjdwnsMwH6TfGjyQwr$NgstwqoTeTDrcgwYrdF" +
		"uIdMb7olL5Ju$uv#N##UdhSsRZVd#wXAp5vVtw74jqyTyYpb7VwDxpF#1$bE$qN$et$Lh$K" +
		"g$r2$qSsLcrJ$fN$Mpm8Xy0dvdzczrdraV6Vy5lA#xVVlF#h5vFpHUg8kKsLlV0NnrT8U#N" +
		"PxtJV#ynJ#$fgzBt4$Vq5sSlzNzLlutuFih4rXT7CtENrWBUWZ9I1yEUpENtPd3BY0rBWtW" +
		"Oj3Jq9thl1N19QnrFFHY1JhANn56q9lyVQWpsj#FEQn2NNQH0aBiZZmuhA5SLb9XuCWmOiF" +
		"WCSJ6m0Fz$tD2CWXx21ZAd3AKFlJ3BgHkeRyI2mDlxHLcV#goMWa1Xxrn1EtI89$w7QX$Fi" +
		"pA1JWobZnZuOvm9z0PT05TGNlyGHJGtmAklH1SHDkAgLEClp$b4UGRGJcFSXxbF7$z6av0A" +
		"bz5TPnoj4w1gxu7ia7mkG==");
 
	static class Events extends beaver.Parser.Events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
		System.err.format("*** " + msg + " ligne %d, colonne %d\n",
			Symbol.getLine(token.getStart()),
			Symbol.getColumn(token.getStart()));
	}
	
	/*
	 * Environnements disponibles pour la gestion des types complexes, des variables et des fonctions.
	 */
	private Environment typeEnvironment = new Environment("types");
	private Environment procedureEnvironment = new Environment("procedures");
	private StackEnvironment stackEnvironment = new StackEnvironment("local_variables_stack");
	private String type_declaration_name;
	
	public void backtrace() 
	{
		typeEnvironment.backtrace();
		procedureEnvironment.backtrace();
		stackEnvironment.backtrace();
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] program = type_declaration_part.tydec variable_declaration_part.vardec procedure_definition_part.procdec empty_main TOKEN_BEGIN statement_list.stmn TOKEN_END
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_tydec = _symbols[offset + 1];
					final NodeList tydec = (NodeList) _symbol_tydec.value;
					final Symbol _symbol_vardec = _symbols[offset + 2];
					final NodeList vardec = (NodeList) _symbol_vardec.value;
					final Symbol _symbol_procdec = _symbols[offset + 3];
					final NodeList procdec = (NodeList) _symbol_procdec.value;
					final Symbol _symbol_stmn = _symbols[offset + 6];
					final Node stmn = (Node) _symbol_stmn.value;
					 stackEnvironment.popEnvironment(); return new NodeList(tydec,vardec,procdec,stmn);
				}
			},
			new Action() {	// [1] empty_main = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 stackEnvironment.pushEnvironment("Main"); return new TypeVoid();
				}
			},
			Action.NONE,  	// [2] type_declaration_part = 
			new Action() {	// [3] type_declaration_part = TOKEN_TYPE type_declaration_list.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final NodeList n = (NodeList) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [4] type_declaration_list = type_declaration_list.list type_declaration.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final NodeList list = (NodeList) _symbol_list.value;
					final Symbol _symbol_node = _symbols[offset + 2];
					final NodeId node = (NodeId) _symbol_node.value;
					 list.add(node); return list;
				}
			},
			new Action() {	// [5] type_declaration_list = type_declaration.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final NodeId node = (NodeId) _symbol_node.value;
					 return new NodeList(node);
				}
			},
			new Action() {	// [6] type_declaration = type_declaration_head.tname TOKEN_AFF type.ty TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_tname = _symbols[offset + 1];
					final IdentifierList tname = (IdentifierList) _symbol_tname.value;
					final Symbol _symbol_ty = _symbols[offset + 3];
					final Type ty = (Type) _symbol_ty.value;
					 	NodeId node = new NodeId(tname.first(), ty); typeEnvironment.putVariable(tname.first(), node); 
																	return node;
				}
			},
			new Action() {	// [7] type_declaration_head = TOKEN_IDENTIFIER.name
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					 return new IdentifierList(name);
				}
			},
			new Action() {	// [8] type = simple_type.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Type n = (Type) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [9] type = named_type.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Type n = (Type) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [10] type = index_type.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Type n = (Type) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [11] type = array_type.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final TypeArray n = (TypeArray) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [12] type = pointer_type.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final TypePointer n = (TypePointer) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [13] type = structure_type.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final TypeStruct n = (TypeStruct) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [14] simple_type = TOKEN_STRING
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeString();
				}
			},
			new Action() {	// [15] simple_type = TOKEN_INTEGER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeInt();
				}
			},
			new Action() {	// [16] simple_type = TOKEN_BOOLEAN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeBoolean();
				}
			},
			new Action() {	// [17] named_type = TOKEN_IDENTIFIER.name
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					 return typeEnvironment.getVariable(name).getType();
				}
			},
			new Action() {	// [18] index_type = enumerated_type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeTuple t = (TypeTuple) _symbol_t.value;
					 return t;
				}
			},
			new Action() {	// [19] index_type = subrange_type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeArrayRange t = (TypeArrayRange) _symbol_t.value;
					 return t;
				}
			},
			new Action() {	// [20] enumerated_type = init_enumerated_type.t TOKEN_LPAR identifier_list.list TOKEN_RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeEnumRange t = (TypeEnumRange) _symbol_t.value;
					final Symbol _symbol_list = _symbols[offset + 3];
					final IdentifierList list = (IdentifierList) _symbol_list.value;
					 
																			TypeTuple tuple = new TypeTuple();
																			int i = 0;
																			for(String s : list)
																			{
																				TypeItemEnum tmp = new TypeItemEnum(i++, s);
																				stackEnvironment.putVariable(s, new NodeId(s, tmp));
																				tuple.add(tmp);
																			}
																			return tuple;
				}
			},
			new Action() {	// [21] init_enumerated_type = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeEnumRange();
				}
			},
			new Action() {	// [22] subrange_type = TOKEN_LIT_INTEGER.int1 TOKEN_DOTDOT TOKEN_LIT_INTEGER.int2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_int1 = _symbols[offset + 1];
					final Integer int1 = (Integer) _symbol_int1.value;
					final Symbol _symbol_int2 = _symbols[offset + 3];
					final Integer int2 = (Integer) _symbol_int2.value;
					 return new TypeArrayRange(new TypeInt(int1), new TypeInt(int2));
				}
			},
			new Action() {	// [23] subrange_type = TOKEN_IDENTIFIER.name1 TOKEN_DOTDOT TOKEN_IDENTIFIER.name2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_name1 = _symbols[offset + 1];
					final String name1 = (String) _symbol_name1.value;
					final Symbol _symbol_name2 = _symbols[offset + 3];
					final String name2 = (String) _symbol_name2.value;
					 return new TypeArrayRange(new TypeNamed(name1), new TypeNamed(name2));
				}
			},
			new Action() {	// [24] array_type = TOKEN_ARRAY TOKEN_LBRACKET range_type.r TOKEN_RBRACKET TOKEN_OF type.ty
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 3];
					final Type r = (Type) _symbol_r.value;
					final Symbol _symbol_ty = _symbols[offset + 6];
					final Type ty = (Type) _symbol_ty.value;
					 return new TypeArray(r, ty);
				}
			},
			new Action() {	// [25] range_type = enumerated_type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeTuple t = (TypeTuple) _symbol_t.value;
					 return t;
				}
			},
			new Action() {	// [26] range_type = subrange_type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeArrayRange t = (TypeArrayRange) _symbol_t.value;
					 return t;
				}
			},
			new Action() {	// [27] range_type = named_type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					 return t;
				}
			},
			new Action() {	// [28] pointer_type = TOKEN_CIRC type.ty
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ty = _symbols[offset + 2];
					final Type ty = (Type) _symbol_ty.value;
					 return new TypePointer(ty);
				}
			},
			new Action() {	// [29] structure_type = TOKEN_STRUCT TOKEN_LBRACE feature_list_type.list TOKEN_RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 3];
					final TypeFeatureList list = (TypeFeatureList) _symbol_list.value;
					 return new TypeStruct(list);
				}
			},
			new Action() {	// [30] feature_list_type = feature_list_type.list feature_type.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final TypeFeatureList list = (TypeFeatureList) _symbol_list.value;
					final Symbol _symbol_f = _symbols[offset + 2];
					final TypeFeature f = (TypeFeature) _symbol_f.value;
					 list.add(f); return list;
				}
			},
			new Action() {	// [31] feature_list_type = feature_type.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_f = _symbols[offset + 1];
					final TypeFeature f = (TypeFeature) _symbol_f.value;
					 return new TypeFeatureList(f);
				}
			},
			new Action() {	// [32] feature_type = TOKEN_IDENTIFIER.name TOKEN_COLON type.t TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final Type t = (Type) _symbol_t.value;
					 return new TypeFeature(name, t);
				}
			},
			Action.NONE,  	// [33] variable_declaration_part = 
			new Action() {	// [34] variable_declaration_part = TOKEN_VAR variable_declaration_list.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 2];
					final Node list = (Node) _symbol_list.value;
					 return list;
				}
			},
			new Action() {	// [35] variable_declaration_list = variable_declaration_list.list variable_declaration.dec
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final Node list = (Node) _symbol_list.value;
					final Symbol _symbol_dec = _symbols[offset + 2];
					final Node dec = (Node) _symbol_dec.value;
					 list.add(dec); return list;
				}
			},
			new Action() {	// [36] variable_declaration_list = variable_declaration.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final Node node = (Node) _symbol_node.value;
					 return new NodeList(node);
				}
			},
			new Action() {	// [37] variable_declaration = identifier_list.list TOKEN_COLON type.ty TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final IdentifierList list = (IdentifierList) _symbol_list.value;
					final Symbol _symbol_ty = _symbols[offset + 3];
					final Type ty = (Type) _symbol_ty.value;
					 	
																NodeList node_list = new NodeList();
																for(String s : list) 
																{
															         NodeId node = new NodeId(s, ty);
															         stackEnvironment.putVariable(s, node);
															         node_list.add(node);
														      	} 
														      	return node_list;
				}
			},
			new Action() {	// [38] identifier_list = identifier_list.list TOKEN_COMMA TOKEN_IDENTIFIER.name
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final IdentifierList list = (IdentifierList) _symbol_list.value;
					final Symbol _symbol_name = _symbols[offset + 3];
					final String name = (String) _symbol_name.value;
					 list.add(name); return list;
				}
			},
			new Action() {	// [39] identifier_list = TOKEN_IDENTIFIER.name
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					 return new IdentifierList(name);
				}
			},
			Action.NONE,  	// [40] procedure_definition_part = 
			new Action() {	// [41] procedure_definition_part = procedure_definition_list.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Node n = (Node) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [42] procedure_definition_list = procedure_definition_list.list procedure_definition.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final Node list = (Node) _symbol_list.value;
					final Symbol _symbol_node = _symbols[offset + 2];
					final Node node = (Node) _symbol_node.value;
					 list.add(node); return list;
				}
			},
			new Action() {	// [43] procedure_definition_list = procedure_definition.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final Node node = (Node) _symbol_node.value;
					 return new NodeList(node);
				}
			},
			new Action() {	// [44] procedure_definition = procedure_definition_head.h block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_h = _symbols[offset + 1];
					final NodeId h = (NodeId) _symbol_h.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Node b = (Node) _symbol_b.value;
					 stackEnvironment.popEnvironment(); return new NodeList(h,b);
				}
			},
			new Action() {	// [45] procedure_definition = procedure_declaration_head.h TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_h = _symbols[offset + 1];
					final NodeId h = (NodeId) _symbol_h.value;
					 stackEnvironment.popEnvironment(); return h;
				}
			},
			new Action() {	// [46] procedure_definition_head = procedure_head.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final NodeId node = (NodeId) _symbol_node.value;
					 	try 
								{
									procedureEnvironment.putVariable(node.getName(), node);
								}
							 	catch (Error err)
							 	{
							 		//Deja defini, mais a remplacer
							 		procedureEnvironment.replaceVariable(node.getName(), node);
							 	}
							 	return node;
				}
			},
			new Action() {	// [47] procedure_declaration_head = procedure_head.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final NodeId node = (NodeId) _symbol_node.value;
					 procedureEnvironment.putVariable(node.getName(),  node); return node;
				}
			},
			new Action() {	// [48] procedure_head = TOKEN_PROCEDURE procedure_name.nid TOKEN_LPAR argt_part.args TOKEN_RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_nid = _symbols[offset + 2];
					final TypeNamed nid = (TypeNamed) _symbol_nid.value;
					final Symbol _symbol_args = _symbols[offset + 4];
					final TypeTuple args = (TypeTuple) _symbol_args.value;
					 	NodeId node = new NodeId(nid.getName(), new TypeFunct(nid.getName(), args, new TypeVoid())); 
							return node;
				}
			},
			new Action() {	// [49] procedure_head = TOKEN_FUNCTION procedure_name.nid TOKEN_LPAR argt_part.args TOKEN_RPAR TOKEN_COLON type.ty
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_nid = _symbols[offset + 2];
					final TypeNamed nid = (TypeNamed) _symbol_nid.value;
					final Symbol _symbol_args = _symbols[offset + 4];
					final TypeTuple args = (TypeTuple) _symbol_args.value;
					final Symbol _symbol_ty = _symbols[offset + 7];
					final Type ty = (Type) _symbol_ty.value;
					 	NodeId node = new NodeId(nid.getName(), new TypeFunct(nid.getName(), args, ty)); 
							return node;
				}
			},
			new Action() {	// [50] procedure_name = TOKEN_IDENTIFIER.namefct
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_namefct = _symbols[offset + 1];
					final String namefct = (String) _symbol_namefct.value;
					 stackEnvironment.pushEnvironment(namefct); return new TypeNamed(namefct);
				}
			},
			Action.NONE,  	// [51] argt_part = 
			new Action() {	// [52] argt_part = argt_list.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final NodeList list = (NodeList) _symbol_list.value;
					
													TypeTuple type_params = new TypeTuple();
													for(Node n : list)
												         type_params.add(((NodeExp)n).getType());
											      	return type_params;
				}
			},
			new Action() {	// [53] argt_list = argt_list.list TOKEN_COMMA argt.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final NodeList list = (NodeList) _symbol_list.value;
					final Symbol _symbol_node = _symbols[offset + 3];
					final Node node = (Node) _symbol_node.value;
					 list.add(node); return list;
				}
			},
			new Action() {	// [54] argt_list = argt.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final Node node = (Node) _symbol_node.value;
					 return new NodeList(node);
				}
			},
			new Action() {	// [55] argt = TOKEN_IDENTIFIER.name TOKEN_COLON type.ty
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					final Symbol _symbol_ty = _symbols[offset + 3];
					final Type ty = (Type) _symbol_ty.value;
					 	NodeId node = new NodeId(name, new TypeFeature (name, ty)); stackEnvironment.putVariable(name, node); 
													return node;
				}
			},
			new Action() {	// [56] block = variable_declaration_part.dec TOKEN_BEGIN statement_list.stmn TOKEN_END
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_dec = _symbols[offset + 1];
					final NodeList dec = (NodeList) _symbol_dec.value;
					final Symbol _symbol_stmn = _symbols[offset + 3];
					final Node stmn = (Node) _symbol_stmn.value;
					 return new NodeList(dec, stmn);
				}
			},
			new Action() {	// [57] statement_list = statement_list.list statement.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final Node list = (Node) _symbol_list.value;
					final Symbol _symbol_node = _symbols[offset + 2];
					final Node node = (Node) _symbol_node.value;
					 list.add(node); return list;
				}
			},
			new Action() {	// [58] statement_list = statement.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final Node node = (Node) _symbol_node.value;
					 return new NodeList(node);
				}
			},
			new Action() {	// [59] statement = simple_statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					 return s;
				}
			},
			new Action() {	// [60] statement = structured_statement.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Node n = (Node) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [61] simple_statement = assignment_statement.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final NodeAssign a = (NodeAssign) _symbol_a.value;
					 return a;
				}
			},
			new Action() {	// [62] simple_statement = procedure_statement.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Node s = (Node) _symbol_s.value;
					 return s;
				}
			},
			new Action() {	// [63] simple_statement = new_statement.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Node n = (Node) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [64] simple_statement = dispose_statement.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 1];
					final Node d = (Node) _symbol_d.value;
					 return d;
				}
			},
			new Action() {	// [65] simple_statement = println_statement.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final Node p = (Node) _symbol_p.value;
					 return p;
				}
			},
			new Action() {	// [66] simple_statement = readln_statement.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 1];
					final Node r = (Node) _symbol_r.value;
					 return r;
				}
			},
			new Action() {	// [67] simple_statement = return_statement.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 1];
					final NodeReturn r = (NodeReturn) _symbol_r.value;
					 return r;
				}
			},
			new Action() {	// [68] assignment_statement = variable_access.v TOKEN_AFF expression.e TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final NodeExp v = (NodeExp) _symbol_v.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final NodeExp e = (NodeExp) _symbol_e.value;
					 return new NodeAssign(v, e);
				}
			},
			new Action() {	// [69] procedure_statement = procedure_expression.e TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Node e = (Node) _symbol_e.value;
					 return e;
				}
			},
			new Action() {	// [70] procedure_expression = TOKEN_IDENTIFIER.name TOKEN_LPAR expression_part.ep TOKEN_RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					final Symbol _symbol_ep = _symbols[offset + 3];
					final NodeList ep = (NodeList) _symbol_ep.value;
					 	NodeId funct = procedureEnvironment.getVariable(name); 
																			return new NodeCallFct( name, (TypeFunct)funct.getType(), ep);
				}
			},
			Action.NONE,  	// [71] expression_part = 
			new Action() {	// [72] expression_part = expression_list.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Node n = (Node) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [73] expression_list = expression_list.list TOKEN_COMMA expression.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final Node list = (Node) _symbol_list.value;
					final Symbol _symbol_node = _symbols[offset + 3];
					final NodeExp node = (NodeExp) _symbol_node.value;
					 list.add(node); return list;
				}
			},
			new Action() {	// [74] expression_list = expression.node
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 1];
					final NodeExp node = (NodeExp) _symbol_node.value;
					 return new NodeList(node);
				}
			},
			new Action() {	// [75] new_statement = TOKEN_NEW variable_access.v TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 2];
					final NodeExp v = (NodeExp) _symbol_v.value;
					 return new NodeNew(v);
				}
			},
			new Action() {	// [76] dispose_statement = TOKEN_DISPOSE variable_access.v TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 2];
					final NodeExp v = (NodeExp) _symbol_v.value;
					 return new NodeDispose(v);
				}
			},
			new Action() {	// [77] println_statement = TOKEN_PRINTLN expression.e TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					 return new NodeOp("println", e);
				}
			},
			new Action() {	// [78] readln_statement = TOKEN_READLN expression.e TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					 return new NodeOp("readln", e);
				}
			},
			new Action() {	// [79] return_statement = TOKEN_RETURN expression.e TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					 return new NodeReturn(e);
				}
			},
			new Action() {	// [80] structured_statement = block.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Node n = (Node) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [81] structured_statement = if_statement.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Node n = (Node) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [82] structured_statement = while_statement.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Node n = (Node) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [83] structured_statement = switch_statement.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol n = _symbols[offset + 1];
					 return n;
				}
			},
			new Action() {	// [84] if_statement = TOKEN_IF expression.e TOKEN_THEN statement.stm1 TOKEN_ELSE statement.stm2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					final Symbol _symbol_stm1 = _symbols[offset + 4];
					final Node stm1 = (Node) _symbol_stm1.value;
					final Symbol _symbol_stm2 = _symbols[offset + 6];
					final Node stm2 = (Node) _symbol_stm2.value;
					 return new NodeIf(e, stm1, stm2);
				}
			},
			new Action() {	// [85] if_statement = TOKEN_IF expression.e TOKEN_THEN statement.stm
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					final Symbol _symbol_stm = _symbols[offset + 4];
					final Node stm = (Node) _symbol_stm.value;
					 return new NodeIf(e, stm);
				}
			},
			new Action() {	// [86] while_statement = TOKEN_WHILE expression.e TOKEN_DO statement.stm
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					final Symbol _symbol_stm = _symbols[offset + 4];
					final Node stm = (Node) _symbol_stm.value;
					 return new NodeWhile(e, stm);
				}
			},
			new Action() {	// [87] switch_statement = TOKEN_SWITCH expression.e TOKEN_BEGIN case_statement_list.stm TOKEN_END
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					final Symbol _symbol_stm = _symbols[offset + 4];
					final NodeList stm = (NodeList) _symbol_stm.value;
					 return new NodeSwitch(e, stm);
				}
			},
			new Action() {	// [88] case_statement_list = case_statement_list.list case_statement.cstmn case_default.cdef
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final NodeList list = (NodeList) _symbol_list.value;
					final Symbol _symbol_cstmn = _symbols[offset + 2];
					final NodeList cstmn = (NodeList) _symbol_cstmn.value;
					final Symbol _symbol_cdef = _symbols[offset + 3];
					final NodeCase cdef = (NodeCase) _symbol_cdef.value;
					 list.add(cstmn); list.add(cdef); return list;
				}
			},
			new Action() {	// [89] case_statement_list = case_statement.cstmn
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_cstmn = _symbols[offset + 1];
					final NodeList cstmn = (NodeList) _symbol_cstmn.value;
					 return new NodeList(cstmn);
				}
			},
			new Action() {	// [90] case_statement = TOKEN_CASE identifier_list.list TOKEN_COLON statement.stm
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 2];
					final IdentifierList list = (IdentifierList) _symbol_list.value;
					final Symbol _symbol_stm = _symbols[offset + 4];
					final Node stm = (Node) _symbol_stm.value;
					 	
																			NodeList node_list = new NodeList();
																			for(String s : list)
																		         node_list.add(new NodeCase(s, stm));
																	      	return node_list;
				}
			},
			Action.NONE,  	// [91] case_default = 
			new Action() {	// [92] case_default = TOKEN_DEFAULT TOKEN_COLON statement.stm
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stm = _symbols[offset + 3];
					final Node stm = (Node) _symbol_stm.value;
					 return new NodeCase(stm);
				}
			},
			new Action() {	// [93] variable_access = TOKEN_IDENTIFIER.name
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					 return stackEnvironment.getVariable(name);
				}
			},
			new Action() {	// [94] variable_access = variable_access.t TOKEN_LBRACKET expression.i TOKEN_RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final NodeExp t = (NodeExp) _symbol_t.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final NodeExp i = (NodeExp) _symbol_i.value;
					 return new NodeArrayAccess(t, i);
				}
			},
			new Action() {	// [95] variable_access = expression.e TOKEN_CIRC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final NodeExp e = (NodeExp) _symbol_e.value;
					 return new NodePtrAccess(e);
				}
			},
			new Action() {	// [96] expression = expression.e1 TOKEN_PLUS expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp("+", e1, e2);
				}
			},
			new Action() {	// [97] expression = expression.e1 TOKEN_MINUS expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp("-", e1, e2);
				}
			},
			new Action() {	// [98] expression = expression.e1 TOKEN_TIMES expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp("*", e1, e2);
				}
			},
			new Action() {	// [99] expression = expression.e1 TOKEN_DIV expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp("/", e1, e2);
				}
			},
			new Action() {	// [100] expression = TOKEN_MINUS expression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					 return new NodeOp("-", e);
				}
			},
			new Action() {	// [101] expression = expression.e1 TOKEN_OR expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp("||", e1, e2);
				}
			},
			new Action() {	// [102] expression = expression.e1 TOKEN_AND expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp("&&", e1, e2);
				}
			},
			new Action() {	// [103] expression = expression.e1 TOKEN_LT expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp("<", e1, e2);
				}
			},
			new Action() {	// [104] expression = expression.e1 TOKEN_LE expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp("<=", e1, e2);
				}
			},
			new Action() {	// [105] expression = expression.e1 TOKEN_GT expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp(">", e1, e2);
				}
			},
			new Action() {	// [106] expression = expression.e1 TOKEN_GE expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp(">=", e1, e2);
				}
			},
			new Action() {	// [107] expression = expression.e1 TOKEN_EQ expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp("==", e1, e2);
				}
			},
			new Action() {	// [108] expression = expression.e1 TOKEN_NE expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeOp("!=", e1, e2);
				}
			},
			new Action() {	// [109] expression = TOKEN_NOT expression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					 return new NodeOp("!", e);
				}
			},
			new Action() {	// [110] expression = TOKEN_LPAR expression.e TOKEN_RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					 return e;
				}
			},
			new Action() {	// [111] expression = procedure_expression.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final Node p = (Node) _symbol_p.value;
					 return p;
				}
			},
			new Action() {	// [112] expression = variable_access.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final NodeExp v = (NodeExp) _symbol_v.value;
					 return v;
				}
			},
			new Action() {	// [113] expression = literal.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final NodeLiteral l = (NodeLiteral) _symbol_l.value;
					 return l;
				}
			},
			new Action() {	// [114] literal = TOKEN_LIT_INTEGER.val
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_val = _symbols[offset + 1];
					final Integer val = (Integer) _symbol_val.value;
					 return new NodeLiteral(new TypeInt(), val);
				}
			},
			new Action() {	// [115] literal = TOKEN_LIT_STRING.str
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_str = _symbols[offset + 1];
					final String str = (String) _symbol_str.value;
					 return new NodeLiteral(new TypeString(), str);
				}
			},
			new Action() {	// [116] literal = TOKEN_TRUE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NodeLiteral(new TypeBoolean(), true);
				}
			},
			new Action() {	// [117] literal = TOKEN_FALSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NodeLiteral(new TypeBoolean(), false);
				}
			},
			new Action() {	// [118] literal = TOKEN_NULL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NodeLiteral(new TypePointer(), null);
				}
			}
		};

 
	report = new Events();
	stackEnvironment.pushEnvironment("Global");
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
