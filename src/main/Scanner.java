/* The following code was generated by JFlex 1.7.0 */

package main;
import beaver.Symbol;



/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/autofs/unitytravail/travail/mcerutti/Semestre 6/Compilation/ProjectCompilation2019/scanner/Scanner.jflex</tt>
 */
class Scanner extends beaver.Scanner {
	
	/** This character denotes the end of file */
	public static final int YYEOF = -1;
	
	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;
	
	/** lexical states */
	public static final int YYINITIAL = 0;
	
	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 *                  at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
			0, 0
	};
	
	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
			"\12\0\1\0\43\0\1\0\1\0\12\0\7\0\32\0\4\0\1\0"+
					"\1\0\4\0\1\0\3\0\1\0\6\0\1\0\12\0\u05e5\0\12\0"+
					"\206\0\12\0\306\0\12\0\u019c\0\12\0\166\0\12\0\166\0\12\0"+
					"\166\0\12\0\166\0\12\0\166\0\12\0\166\0\12\0\166\0\12\0"+
					"\166\0\12\0\166\0\12\0\140\0\12\0\166\0\12\0\106\0\12\0"+
					"\u0116\0\12\0\106\0\12\0\u0746\0\12\0\46\0\12\0\u012c\0\12\0"+
					"\200\0\12\0\246\0\12\0\6\0\12\0\266\0\12\0\126\0\12\0"+
					"\206\0\12\0\6\0\12\0\u89c6\0\12\0\u02a6\0\12\0\46\0\12\0"+
					"\306\0\12\0\26\0\12\0\126\0\12\0\u0196\0\12\0\u5316\0\12\0"+
					"\u0586\0\12\0\u0bbc\0\12\0\200\0\12\0\74\0\12\0\220\0\12\0"+
					"\u0116\0\12\0\u0156\0\12\0\166\0\12\0\u0176\0\12\0\146\0\12\0"+
					"\146\0\12\0\u01a6\0\12\0\u0366\0\12\0\u4e06\0\12\0\346\0\12\0"+
					"\u6c74\0\62\0\u1150\0\12\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";
	
	/**
	 * Translates characters to character classes
	 */
	private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
	
	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int [] ZZ_ACTION = zzUnpackAction();
	
	private static final String ZZ_ACTION_PACKED_0 =
			"\1\0\1\1";
	
	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int [] ZZ_ROWMAP = zzUnpackRowMap();
	
	private static final String ZZ_ROWMAP_PACKED_0 =
			"\0\0\0\1";
	
	
	/**
	 * The transition table of the DFA
	 */
	private static final int [] ZZ_TRANS = zzUnpackTrans();
	
	private static final String ZZ_TRANS_PACKED_0 =
			"\1\2\1\0";
	
	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	
	private static final int ZZ_NO_MATCH = 1;
	
	private static final int ZZ_PUSHBACK_2BIG = 2;
	
	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unknown internal scanner error",
			"Error: could not match input",
			"Error: pushback value was too large"
	};
	
	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();
	
	private static final String ZZ_ATTRIBUTE_PACKED_0 =
			"\1\0\1\11";
	
	
	private static int [] zzUnpackAction() {
		int [] result = new int[2];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}
	private static int zzUnpackAction(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
			{
				result[j++] = value;
			}
			while (--count > 0);
		}
		return j;
	}
	private static int [] zzUnpackAttribute() {
		int [] result = new int[2];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}
	
	private static int zzUnpackAttribute(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
			{
				result[j++] = value;
			}
			while (--count > 0);
		}
		return j;
	}
	
	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed   the packed character translation table
	 * @return         the unpacked character translation table
	 */
	private static char [] zzUnpackCMap(String packed) {
		char [] map = new char[0x110000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < 280) {
			int  count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
			{
				map[j++] = value;
			}
			while (--count > 0);
		}
		return map;
	}
	
	private static int [] zzUnpackRowMap() {
		int [] result = new int[2];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}
	
	private static int zzUnpackRowMap(String packed, int offset, int [] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}
	
	private static int [] zzUnpackTrans() {
		int [] result = new int[2];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}
	
	private static int zzUnpackTrans(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
			{
				result[j++] = value;
			}
			while (--count > 0);
		}
		return j;
	}
	
	/** the input device */
	private java.io.Reader zzReader;
	
	/** the current state of the DFA */
	private int zzState;
	
	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;
	
	/** this buffer contains the current text to be matched and is
      the source of the yytext() string */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
	
	/** the textposition at the last accepting state */
	private int zzMarkedPos;
	
	/** the current text position in the buffer */
	private int zzCurrentPos;
	
	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;
	
	/** endRead marks the last character in the buffer, that has been read
      from input */
	private int zzEndRead;
	
	/** number of newlines encountered up to the start of the matched text */
	private int yyline;
	
	/** the number of characters up to the start of the matched text */
	private int yychar;
	
	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;
	
	/**
	 * zzAtBOL == true iff the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;
	
	/** zzAtEOF == true iff the scanner is at the EOF */
	private boolean zzAtEOF;
	
	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;
	
	/**
	 * The number of occupied positions in zzBuffer beyond zzEndRead.
	 * When a lead/high surrogate has been read from the input stream
	 * into the final zzBuffer position, this will have a value of 1;
	 * otherwise, it will have a value of 0.
	 */
	private int zzFinalHighSurrogate = 0;
	
	/**
	 * Creates a new scanner
	 *
	 * @param   in  the java.io.Reader to read input from.
	 */
	Scanner(java.io.Reader in) {
		this.zzReader = in;
	}
	
	
	
	/* user code: */
	// Petit helpers pour simplifier la cr√©ation de token.
	// On retient la position de chaque token pour la gestion d'erreur
	// voir beaver-rt/src/main/java/beaver/Symbol.java
	private Symbol newToken(short id)
	{
		return new Symbol(id, this.yyline + 1, this.yycolumn + 1, yylength(), null);
	}
	
	
	private Symbol newToken(short id, Object value)
	{
		return new Symbol(id, this.yyline + 1, this.yycolumn + 1, yylength(), value);
	}
	
	
	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return      the next token
	 * @exception   java.io.IOException  if any I/O-Error occurs
	 */
	@Override
	public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
		int zzInput;
		int zzAction;
		
		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = this.zzEndRead;
		char [] zzBufferL = this.zzBuffer;
		char [] zzCMapL = ZZ_CMAP;
		
		int [] zzTransL = ZZ_TRANS;
		int [] zzRowMapL = ZZ_ROWMAP;
		int [] zzAttrL = ZZ_ATTRIBUTE;
		
		while (true) {
			zzMarkedPosL = this.zzMarkedPos;
			
			boolean zzR = false;
			int zzCh;
			int zzCharCount;
			for (zzCurrentPosL = this.zzStartRead  ;
					zzCurrentPosL < zzMarkedPosL ;
					zzCurrentPosL += zzCharCount ) {
				zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
				zzCharCount = Character.charCount(zzCh);
				switch (zzCh) {
					case '\u000B':  // fall through
					case '\u000C':  // fall through
					case '\u0085':  // fall through
					case '\u2028':  // fall through
					case '\u2029':
						this.yyline++;
						this.yycolumn = 0;
						zzR = false;
						break;
					case '\r':
						this.yyline++;
						this.yycolumn = 0;
						zzR = true;
						break;
					case '\n':
						if (zzR)
						{
							zzR = false;
						}
						else {
							this.yyline++;
							this.yycolumn = 0;
						}
						break;
					default:
						zzR = false;
						this.yycolumn += zzCharCount;
				}
			}
			
			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
				{
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				else if (this.zzAtEOF)
				{
					zzPeek = false;
				}
				else {
					boolean eof = zzRefill();
					zzEndReadL = this.zzEndRead;
					zzMarkedPosL = this.zzMarkedPos;
					zzBufferL = this.zzBuffer;
					if (eof)
					{
						zzPeek = false;
					}
					else
					{
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
					}
				}
				if (zzPeek)
				{
					this.yyline--;
				}
			}
			zzAction = -1;
			
			zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;
			
			this.zzState = ZZ_LEXSTATE[this.zzLexicalState];
			
			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[this.zzState];
			if ( (zzAttributes & 1) == 1 ) {
				zzAction = this.zzState;
			}
			
			
			zzForAction: {
				while (true) {
					
					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					}
					else if (this.zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					}
					else {
						// store back cached positions
						this.zzCurrentPos  = zzCurrentPosL;
						this.zzMarkedPos   = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL  = this.zzCurrentPos;
						zzMarkedPosL   = this.zzMarkedPos;
						zzBufferL      = this.zzBuffer;
						zzEndReadL     = this.zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						}
						else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[ zzRowMapL[this.zzState] + zzCMapL[zzInput] ];
					if (zzNext == -1)
					{
						break zzForAction;
					}
					this.zzState = zzNext;
					
					zzAttributes = zzAttrL[this.zzState];
					if ( (zzAttributes & 1) == 1 ) {
						zzAction = this.zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ( (zzAttributes & 8) == 8 )
						{
							break zzForAction;
						}
					}
					
				}
			}
			
			// store back cached position
			this.zzMarkedPos = zzMarkedPosL;
			
			if (zzInput == YYEOF && this.zzStartRead == this.zzCurrentPos) {
				this.zzAtEOF = true;
				{ 	System.out.println(yytext()); return new Symbol(Terminals.TOKEN_END);
				}
			}
			else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1:
					{ throw new Scanner.Exception("caract√®re inattendu '" + yytext() + "'");
					}
					// fall through
					case 2: break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}
	
	
	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		this.zzLexicalState = newState;
	}
	
	
	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return this.zzBuffer[this.zzStartRead+pos];
	}
	
	
	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		this.zzAtEOF = true;            /* indicate end of file */
		this.zzEndRead = this.zzStartRead;  /* invalidate buffer    */
		
		if (this.zzReader != null)
		{
			this.zzReader.close();
		}
	}
	
	
	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return this.zzMarkedPos-this.zzStartRead;
	}
	
	
	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number  the number of characters to be read again.
	 *                This number must not be greater than yylength()!
	 */
	public void yypushback(int number)  {
		if ( number > yylength() )
		{
			zzScanError(ZZ_PUSHBACK_2BIG);
		}
		
		this.zzMarkedPos -= number;
	}
	
	
	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>ZZ_INITIAL</tt>.
	 *
	 * Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader   the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		this.zzReader = reader;
		this.zzAtBOL  = true;
		this.zzAtEOF  = false;
		this.zzEOFDone = false;
		this.zzEndRead = this.zzStartRead = 0;
		this.zzCurrentPos = this.zzMarkedPos = 0;
		this.zzFinalHighSurrogate = 0;
		this.yyline = this.yychar = this.yycolumn = 0;
		this.zzLexicalState = YYINITIAL;
		if (this.zzBuffer.length > ZZ_BUFFERSIZE)
		{
			this.zzBuffer = new char[ZZ_BUFFERSIZE];
		}
	}
	
	
	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return this.zzLexicalState;
	}
	
	
	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String( this.zzBuffer, this.zzStartRead, this.zzMarkedPos-this.zzStartRead );
	}
	
	
	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>false</code>, iff there was new input.
	 * 
	 * @exception   java.io.IOException  if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		
		/* first: make room (if you can) */
		if (this.zzStartRead > 0) {
			this.zzEndRead += this.zzFinalHighSurrogate;
			this.zzFinalHighSurrogate = 0;
			System.arraycopy(this.zzBuffer, this.zzStartRead,
					this.zzBuffer, 0,
					this.zzEndRead-this.zzStartRead);
			
			/* translate stored positions */
			this.zzEndRead-= this.zzStartRead;
			this.zzCurrentPos-= this.zzStartRead;
			this.zzMarkedPos-= this.zzStartRead;
			this.zzStartRead = 0;
		}
		
		/* is the buffer big enough? */
		if (this.zzCurrentPos >= this.zzBuffer.length - this.zzFinalHighSurrogate) {
			/* if not: blow it up */
			char newBuffer[] = new char[this.zzBuffer.length*2];
			System.arraycopy(this.zzBuffer, 0, newBuffer, 0, this.zzBuffer.length);
			this.zzBuffer = newBuffer;
			this.zzEndRead += this.zzFinalHighSurrogate;
			this.zzFinalHighSurrogate = 0;
		}
		
		/* fill the buffer with new input */
		int requested = this.zzBuffer.length - this.zzEndRead;
		int numRead = this.zzReader.read(this.zzBuffer, this.zzEndRead, requested);
		
		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0) {
			throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
		}
		if (numRead > 0) {
			this.zzEndRead += numRead;
			/* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
			if (numRead == requested) {
				if (Character.isHighSurrogate(this.zzBuffer[this.zzEndRead - 1])) {
					--this.zzEndRead;
					this.zzFinalHighSurrogate = 1;
				}
			}
			/* potentially more input available */
			return false;
		}
		
		/* numRead < 0 ==> end of stream */
		return true;
	}
	
	
	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param   errorCode  the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		}
		catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}
		
		throw new Error(message);
	}
	
	
}
